// Copyright 2021 The Khronos Group
// SPDX-License-Identifier: Apache-2.0

// This file was generated by generate_device_frontend.py from $template

#pragma once

#include "TreeObject.h"

#include <vector>

namespace anari_sdk{
namespace tree{


template<>
class Object<Array1D> : public ArrayObjectBase {
    Array1D staging;
    Array1D current;

    void* appMemory;
    ANARIMemoryDeleter deleter;
    void* userdata;
    ANARIDataType elementType;
    uint64_t numItems1;
    uint64_t byteStride1;

    std::vector<ANARIObject> objectArray;
public:
    Object(ANARIDevice d, ANARIObject handle, void* appMemory,
        ANARIMemoryDeleter deleter, void* userdata, ANARIDataType type,
        uint64_t numItems1, uint64_t byteStride1);

    bool set(const char *paramname, ANARIDataType type, const void *mem) override;
    void unset(const char *paramname) override;
    void commit() override;
    int getProperty(
        const char *propname, ANARIDataType type,
        void *mem, uint64_t size, ANARIWaitMask mask) override;
    void* map() override;
    void unmap() override;
    void releasePublic() override;
    ANARIDataType type() const override { return Array1D::type; }
    const char* subtype() const override { return Array1D::subtype; }
    ParameterPack& parameters() override { return current; }
    const std::vector<ANARIObject>& objects() { return objectArray; }
    ~Object();
};

template<>
class Object<Array2D> : public ArrayObjectBase {
    Array2D staging;
    Array2D current;

    void* appMemory;
    ANARIMemoryDeleter deleter;
    void* userdata;
    ANARIDataType elementType;
    uint64_t numItems1;
    uint64_t numItems2;
    uint64_t byteStride1;
    uint64_t byteStride2;

public:
    Object(ANARIDevice d, ANARIObject handle, void* appMemory,
        ANARIMemoryDeleter deleter, void* userdata, ANARIDataType type,
        uint64_t numItems1, uint64_t numItems2,
        uint64_t byteStride1, uint64_t byteStride2);

    bool set(const char *paramname, ANARIDataType type, const void *mem) override;
    void unset(const char *paramname) override;
    void commit() override;
    int getProperty(
        const char *propname, ANARIDataType type,
        void *mem, uint64_t size, ANARIWaitMask mask) override;
    void* map() override;
    void unmap() override;
    void releasePublic() override;
    ANARIDataType type() const override { return Array2D::type; }
    const char* subtype() const override { return Array2D::subtype; }
    ParameterPack& parameters() override { return current; }
    ~Object();
};

template<>
class Object<Array3D> : public ArrayObjectBase {
    Array3D staging;
    Array3D current;

    void* appMemory;
    ANARIMemoryDeleter deleter;
    void* userdata;
    ANARIDataType elementType;
    uint64_t numItems1;
    uint64_t numItems2;
    uint64_t numItems3;
    uint64_t byteStride1;
    uint64_t byteStride2;
    uint64_t byteStride3;
public:
    Object(ANARIDevice d, ANARIObject handle, void* appMemory,
        ANARIMemoryDeleter deleter, void* userdata, ANARIDataType type,
        uint64_t numItems1, uint64_t numItems2, uint64_t numItems3,
        uint64_t byteStride1, uint64_t byteStride2, uint64_t byteStride3);

    bool set(const char *paramname, ANARIDataType type, const void *mem) override;
    void unset(const char *paramname) override;
    void commit() override;
    int getProperty(
        const char *propname, ANARIDataType type,
        void *mem, uint64_t size, ANARIWaitMask mask) override;
    void* map() override;
    void unmap() override;
    void releasePublic() override;
    ANARIDataType type() const override { return Array3D::type; }
    const char* subtype() const override { return Array3D::subtype; }
    ParameterPack& parameters() override { return current; }
    ~Object();
};

} //namespace anari_sdk
} //namespace tree

