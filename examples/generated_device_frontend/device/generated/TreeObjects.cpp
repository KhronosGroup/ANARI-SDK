// Copyright 2021 The Khronos Group
// SPDX-License-Identifier: Apache-2.0

// This file was generated by generate_device_frontend.py
// Don't make changes to this directly

#include <stdint.h>
#include "TreeObjects.h"
namespace anari_sdk{
namespace tree{
static int param_hash(const char *str) {
   static const uint32_t table[] = {0x74630017u,0x0u,0x7030005cu,0x6a6100e2u,0x65640106u,0x7061010du,0x73650157u,0x0u,0x736d0170u,0x0u,0x0u,0x6a61029cu,0x706102aeu,0x706102eeu,0x76660305u,0x736f0375u,0x0u,0x666103ccu,0x76630400u,0x736904bau,0x717004cfu,0x706104d1u,0x736f0550u,0x64630028u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x63620033u,0x0u,0x68670038u,0x0u,0x66650046u,0x0u,0x73720053u,0x71700057u,0x76750029u,0x6e6d002au,0x7675002bu,0x6d6c002cu,0x6261002du,0x7574002eu,0x6a69002fu,0x706f0030u,0x6f6e0031u,0x1000032u,0x80000000u,0x66650034u,0x65640035u,0x706f0036u,0x1000037u,0x80000001u,0x76750039u,0x6d6c003au,0x6261003bu,0x7372003cu,0x4544003du,0x6a69003eu,0x6261003fu,0x6e6d0040u,0x66650041u,0x75740042u,0x66650043u,0x73720044u,0x1000045u,0x80000002u,0x73720047u,0x75740048u,0x76750049u,0x7372004au,0x6665004bu,0x5352004cu,0x6261004du,0x6564004eu,0x6a69004fu,0x76750050u,0x74730051u,0x1000052u,0x80000003u,0x62610054u,0x7a790055u,0x1000056u,0x80000004u,0x66650058u,0x64630059u,0x7574005au,0x100005bu,0x80000005u,0x100009cu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x716d009du,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x6d6c00a7u,0x80000006u,0x666500a1u,0x0u,0x0u,0x747300a5u,0x737200a2u,0x626100a3u,0x10000a4u,0x80000007u,0x10000a6u,0x80000008u,0x706f00a8u,0x737200a9u,0x2f0000aau,0x80000009u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x717000d9u,0x706f00dau,0x747300dbu,0x6a6900dcu,0x757400ddu,0x6a6900deu,0x706f00dfu,0x6f6e00e0u,0x10000e1u,0x8000000au,0x757400ebu,0x0u,0x0u,0x0u,0x716e00eeu,0x0u,0x0u,0x0u,0x737200feu,0x626100ecu,0x10000edu,0x8000000bu,0x747300f1u,0x0u,0x757400fbu,0x6a6900f2u,0x757400f3u,0x7a7900f4u,0x545300f5u,0x646300f6u,0x626100f7u,0x6d6c00f8u,0x666500f9u,0x10000fau,0x8000000cu,0x696800fcu,0x10000fdu,0x8000000du,0x666500ffu,0x64630100u,0x75740101u,0x6a690102u,0x706f0103u,0x6f6e0104u,0x1000105u,0x8000000eu,0x68670107u,0x66650108u,0x33310109u,0x100010bu,0x100010cu,0x8000000fu,0x80000010u,0x6d6c011cu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x6d650127u,0x0u,0x0u,0x0u,0x0u,0x0u,0x77630136u,0x6d6c011du,0x706f011eu,0x6766011fu,0x67660120u,0x42410121u,0x6f6e0122u,0x68670123u,0x6d6c0124u,0x66650125u,0x1000126u,0x80000011u,0x6d6c012fu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x75740132u,0x65640130u,0x1000131u,0x80000012u,0x66650133u,0x73720134u,0x1000135u,0x80000013u,0x7675014au,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x7a790155u,0x7473014bu,0x4544014cu,0x6a69014du,0x7473014eu,0x7574014fu,0x62610150u,0x6f6e0151u,0x64630152u,0x66650153u,0x1000154u,0x80000014u,0x1000156u,0x80000015u,0x706f0165u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x706f016cu,0x6e6d0166u,0x66650167u,0x75740168u,0x73720169u,0x7a79016au,0x100016bu,0x80000016u,0x7675016du,0x7170016eu,0x100016fu,0x80000017u,0x62610176u,0x754101d2u,0x0u,0x0u,0x0u,0x73720294u,0x68670177u,0x66650178u,0x53000179u,0x80000018u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x666501ccu,0x686701cdu,0x6a6901ceu,0x706f01cfu,0x6f6e01d0u,0x10001d1u,0x80000019u,0x75740206u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x7372020fu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x66650218u,0x0u,0x0u,0x0u,0x0u,0x75740221u,0x66650227u,0x75740207u,0x73720208u,0x6a690209u,0x6362020au,0x7675020bu,0x7574020cu,0x6665020du,0x100020eu,0x8000001au,0x62610210u,0x6f6e0211u,0x74730212u,0x67660213u,0x706f0214u,0x73720215u,0x6e6d0216u,0x1000217u,0x8000001bu,0x73720219u,0x5352021au,0x6261021bu,0x6564021cu,0x6a69021du,0x7675021eu,0x7473021fu,0x1000220u,0x8000001cu,0x62610222u,0x6f6e0223u,0x64630224u,0x66650225u,0x1000226u,0x8000001du,0x736e0228u,0x7473022du,0x0u,0x0u,0x0u,0x71700282u,0x6a69022eu,0x7574022fu,0x7a790230u,0x45000231u,0x8000001eu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x6a690276u,0x74730277u,0x75740278u,0x73720279u,0x6a69027au,0x6362027bu,0x7675027cu,0x7574027du,0x6a69027eu,0x706f027fu,0x6f6e0280u,0x1000281u,0x8000001fu,0x76750283u,0x71700284u,0x6a690285u,0x6d6c0286u,0x6d6c0287u,0x62610288u,0x73720289u,0x7a79028au,0x4544028bu,0x6a69028cu,0x7473028du,0x7574028eu,0x6261028fu,0x6f6e0290u,0x64630291u,0x66650292u,0x1000293u,0x80000020u,0x6a690295u,0x65640296u,0x62610297u,0x6f6e0298u,0x64630299u,0x6665029au,0x100029bu,0x80000021u,0x7a7902a5u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x686702aau,0x706f02a6u,0x767502a7u,0x757402a8u,0x10002a9u,0x80000022u,0x696802abu,0x757402acu,0x10002adu,0x80000023u,0x757402bdu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x757402c4u,0x666502beu,0x737202bfu,0x6a6902c0u,0x626102c1u,0x6d6c02c2u,0x10002c3u,0x80000024u,0x6a6902c5u,0x706f02c6u,0x6f6e02c7u,0x2f2e02c8u,0x757202c9u,0x706f02ccu,0x646302d4u,0x737202d9u,0x757402cdu,0x626102ceu,0x757402cfu,0x6a6902d0u,0x706f02d1u,0x6f6e02d2u,0x10002d3u,0x80000025u,0x626102d5u,0x6d6c02d6u,0x666502d7u,0x10002d8u,0x80000026u,0x626102dau,0x6f6e02dbu,0x747302dcu,0x6d6602ddu,0x706f02e4u,0x0u,0x0u,0x0u,0x0u,0x0u,0x626102e8u,0x737202e5u,0x6e6d02e6u,0x10002e7u,0x80000027u,0x757402e9u,0x6a6902eau,0x706f02ebu,0x6f6e02ecu,0x10002edu,0x80000028u,0x6e6d02fdu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x73720300u,0x666502feu,0x10002ffu,0x80000029u,0x6e6d0301u,0x62610302u,0x6d6c0303u,0x1000304u,0x8000002au,0x67660315u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x6661031au,0x0u,0x6a690365u,0x0u,0x0u,0x7574036au,0x74730316u,0x66650317u,0x75740318u,0x1000319u,0x8000002bu,0x6463031fu,0x0u,0x0u,0x0u,0x6f6e035bu,0x6a690320u,0x75740321u,0x7a790322u,0x2f000323u,0x8000002cu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x71700352u,0x706f0353u,0x74730354u,0x6a690355u,0x75740356u,0x6a690357u,0x706f0358u,0x6f6e0359u,0x100035au,0x8000002du,0x6a69035cu,0x6f6e035du,0x6867035eu,0x4241035fu,0x6f6e0360u,0x68670361u,0x6d6c0362u,0x66650363u,0x1000364u,0x8000002eu,0x68670366u,0x6a690367u,0x6f6e0368u,0x1000369u,0x8000002fu,0x5554036bu,0x7372036cu,0x6261036du,0x6f6e036eu,0x7473036fu,0x67660370u,0x706f0371u,0x73720372u,0x6e6d0373u,0x1000374u,0x80000030u,0x78730379u,0x0u,0x0u,0x6a690387u,0x6a69037eu,0x0u,0x0u,0x0u,0x66650384u,0x7574037fu,0x6a690380u,0x706f0381u,0x6f6e0382u,0x1000383u,0x80000031u,0x73720385u,0x1000386u,0x80000032u,0x6e6d0388u,0x6a690389u,0x7574038au,0x6a69038bu,0x7776038cu,0x6665038du,0x2f2e038eu,0x7361038fu,0x757403a1u,0x0u,0x706f03b1u,0x0u,0x0u,0x0u,0x0u,0x0u,0x6f6403b6u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x626103c6u,0x757403a2u,0x737203a3u,0x6a6903a4u,0x636203a5u,0x767503a6u,0x757403a7u,0x666503a8u,0x343003a9u,0x10003adu,0x10003aeu,0x10003afu,0x10003b0u,0x80000033u,0x80000034u,0x80000035u,0x80000036u,0x6d6c03b2u,0x706f03b3u,0x737203b4u,0x10003b5u,0x80000037u,0x10003c1u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x656403c2u,0x80000038u,0x666503c3u,0x797803c4u,0x10003c5u,0x80000039u,0x656403c7u,0x6a6903c8u,0x767503c9u,0x747303cau,0x10003cbu,0x8000003au,0x656403d1u,0x0u,0x0u,0x0u,0x6f6703eeu,0x6a6903d2u,0x766103d3u,0x6f6e03e8u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x747303ecu,0x646303e9u,0x666503eau,0x10003ebu,0x8000003bu,0x10003edu,0x8000003cu,0x6a6903f6u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x656403fau,0x706f03f7u,0x6f6e03f8u,0x10003f9u,0x8000003du,0x666503fbu,0x737203fcu,0x666503fdu,0x737203feu,0x10003ffu,0x8000003eu,0x62610413u,0x0u,0x0u,0x0u,0x0u,0x76750417u,0x7b64041du,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x62610438u,0x0u,0x0u,0x0u,0x6661043eu,0x737204b4u,0x6d6c0414u,0x66650415u,0x1000416u,0x8000003fu,0x75740418u,0x75740419u,0x6665041au,0x7372041bu,0x100041cu,0x80000040u,0x66650434u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x66650436u,0x1000435u,0x80000041u,0x1000437u,0x80000042u,0x64630439u,0x6a69043au,0x6f6e043bu,0x6867043cu,0x100043du,0x80000043u,0x75740443u,0x0u,0x0u,0x0u,0x737204acu,0x76750444u,0x74730445u,0x44430446u,0x62610447u,0x6d6c0448u,0x6d6c0449u,0x6362044au,0x6261044bu,0x6463044cu,0x6c6b044du,0x5600044eu,0x80000044u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x747304a4u,0x666504a5u,0x737204a6u,0x454404a7u,0x626104a8u,0x757404a9u,0x626104aau,0x10004abu,0x80000045u,0x666504adu,0x706f04aeu,0x4e4d04afu,0x706f04b0u,0x656404b1u,0x666504b2u,0x10004b3u,0x80000046u,0x676604b5u,0x626104b6u,0x646304b7u,0x666504b8u,0x10004b9u,0x80000047u,0x6e6d04c4u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x626104c7u,0x666504c5u,0x10004c6u,0x80000048u,0x6f6e04c8u,0x747304c9u,0x676604cau,0x706f04cbu,0x737204ccu,0x6e6d04cdu,0x10004ceu,0x80000049u,0x10004d0u,0x8000004au,0x736c04e0u,0x0u,0x0u,0x0u,0x737204f5u,0x0u,0x0u,0x0u,0x74730545u,0x0u,0x0u,0x0u,0x0u,0x0u,0x6d6c054bu,0x767504e7u,0x0u,0x0u,0x0u,0x0u,0x0u,0x6a6904efu,0x666504e8u,0x535204e9u,0x626104eau,0x6f6e04ebu,0x686704ecu,0x666504edu,0x10004eeu,0x8000004bu,0x626104f0u,0x6f6e04f1u,0x646304f2u,0x666504f3u,0x10004f4u,0x8000004cu,0x757404f6u,0x666504f7u,0x797804f8u,0x2f2e04f9u,0x736104fau,0x7574050cu,0x0u,0x7061051cu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x706f0531u,0x0u,0x706f0537u,0x0u,0x6261053fu,0x7574050du,0x7372050eu,0x6a69050fu,0x63620510u,0x76750511u,0x75740512u,0x66650513u,0x34300514u,0x1000518u,0x1000519u,0x100051au,0x100051bu,0x8000004du,0x8000004eu,0x8000004fu,0x80000050u,0x7170052bu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x6d6c052du,0x100052cu,0x80000051u,0x706f052eu,0x7372052fu,0x1000530u,0x80000052u,0x73720532u,0x6e6d0533u,0x62610534u,0x6d6c0535u,0x1000536u,0x80000053u,0x74730538u,0x6a690539u,0x7574053au,0x6a69053bu,0x706f053cu,0x6f6e053du,0x100053eu,0x80000054u,0x65640540u,0x6a690541u,0x76750542u,0x74730543u,0x1000544u,0x80000055u,0x6a690546u,0x63620547u,0x6d6c0548u,0x66650549u,0x100054au,0x80000056u,0x7675054cu,0x6e6d054du,0x6665054eu,0x100054fu,0x80000057u,0x73720554u,0x0u,0x0u,0x62610558u,0x6d6c0555u,0x65640556u,0x1000557u,0x80000058u,0x71700559u,0x4e4d055au,0x706f055bu,0x6564055cu,0x6665055du,0x3431055eu,0x1000561u,0x1000562u,0x1000563u,0x80000059u,0x8000005au,0x8000005bu};
   uint32_t cur = 0x78610000u;
   for(int i = 0;cur!=0;++i) {
      uint32_t idx = cur&0xFFFFu;
      uint32_t low = (cur>>16u)&0xFFu;
      uint32_t high = (cur>>24u)&0xFFu;
      uint32_t c = (uint32_t)str[i];
      if(c>=low && c<high) {
         cur = table[idx+c-low];
      } else {
         break;
      }
      if(cur&0x80000000u) {
         return cur&0xFFFFu;
      }
      if(str[i]==0) {
         break;
      }
   }
   return -1;
}
Device::Device(ANARIDevice device, ANARIObject o) : device(device), object(o) {
}
bool Device::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 68: //statusCallback
         return statusCallback.set(device, object, type, mem);
      case 69: //statusCallbackUserData
         return statusCallbackUserData.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void Device::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 68: //statusCallback
         statusCallback.unset(device, object);
         return;
      case 69: //statusCallbackUserData
         statusCallbackUserData.unset(device, object);
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& Device::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return statusCallback;
      case 2: return statusCallbackUserData;
      default: return empty;
   }
}
ParameterBase& Device::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 68: return statusCallback;
      case 69: return statusCallbackUserData;
      default: return empty;
   }
}
const char ** Device::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "statusCallback",
      "statusCallbackUserData",
      nullptr
   };
   return paramnames;
}
size_t Device::paramCount() const {
   return 3;
}

Array1D::Array1D(ANARIDevice device, ANARIObject o) : device(device), object(o) {
}
bool Array1D::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 61: //region
         return region.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void Array1D::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 61: //region
         region.unset(device, object);
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& Array1D::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return region;
      default: return empty;
   }
}
ParameterBase& Array1D::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 61: return region;
      default: return empty;
   }
}
const char ** Array1D::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "region",
      nullptr
   };
   return paramnames;
}
size_t Array1D::paramCount() const {
   return 2;
}

Array2D::Array2D(ANARIDevice device, ANARIObject o) : device(device), object(o) {
}
bool Array2D::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void Array2D::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& Array2D::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      default: return empty;
   }
}
ParameterBase& Array2D::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      default: return empty;
   }
}
const char ** Array2D::paramNames() const {
   static const char *paramnames[] = {
      "name",
      nullptr
   };
   return paramnames;
}
size_t Array2D::paramCount() const {
   return 1;
}

Array3D::Array3D(ANARIDevice device, ANARIObject o) : device(device), object(o) {
}
bool Array3D::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void Array3D::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& Array3D::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      default: return empty;
   }
}
ParameterBase& Array3D::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      default: return empty;
   }
}
const char ** Array3D::paramNames() const {
   static const char *paramnames[] = {
      "name",
      nullptr
   };
   return paramnames;
}
size_t Array3D::paramCount() const {
   return 1;
}

Frame::Frame(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      int32_t value[] = {INT32_C(0)};
      accumulation.set(device, object, ANARI_BOOL, value);
   }
   {
      int32_t value[] = {INT32_C(0)};
      variance.set(device, object, ANARI_BOOL, value);
   }
}
bool Frame::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 88: //world
         return world.set(device, object, type, mem);
      case 62: //renderer
         return renderer.set(device, object, type, mem);
      case 7: //camera
         return camera.set(device, object, type, mem);
      case 66: //size
         return size.set(device, object, type, mem);
      case 9: //color
         return color.set(device, object, type, mem);
      case 13: //depth
         return depth.set(device, object, type, mem);
      case 42: //normal
         return normal.set(device, object, type, mem);
      case 1: //albedo
         return albedo.set(device, object, type, mem);
      case 0: //accumulation
         return accumulation.set(device, object, type, mem);
      case 76: //variance
         return variance.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void Frame::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 88: //world
         world.unset(device, object);
         return;
      case 62: //renderer
         renderer.unset(device, object);
         return;
      case 7: //camera
         camera.unset(device, object);
         return;
      case 66: //size
         size.unset(device, object);
         return;
      case 9: //color
         color.unset(device, object);
         return;
      case 13: //depth
         depth.unset(device, object);
         return;
      case 42: //normal
         normal.unset(device, object);
         return;
      case 1: //albedo
         albedo.unset(device, object);
         return;
      case 0: //accumulation
         {
            int32_t value[] = {INT32_C(0)};
            accumulation.set(device, object, ANARI_BOOL, value);
         }
         return;
      case 76: //variance
         {
            int32_t value[] = {INT32_C(0)};
            variance.set(device, object, ANARI_BOOL, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& Frame::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return world;
      case 2: return renderer;
      case 3: return camera;
      case 4: return size;
      case 5: return color;
      case 6: return depth;
      case 7: return normal;
      case 8: return albedo;
      case 9: return accumulation;
      case 10: return variance;
      default: return empty;
   }
}
ParameterBase& Frame::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 88: return world;
      case 62: return renderer;
      case 7: return camera;
      case 66: return size;
      case 9: return color;
      case 13: return depth;
      case 42: return normal;
      case 1: return albedo;
      case 0: return accumulation;
      case 76: return variance;
      default: return empty;
   }
}
const char ** Frame::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "world",
      "renderer",
      "camera",
      "size",
      "color",
      "depth",
      "normal",
      "albedo",
      "accumulation",
      "variance",
      nullptr
   };
   return paramnames;
}
size_t Frame::paramCount() const {
   return 11;
}

Group::Group(ANARIDevice device, ANARIObject o) : device(device), object(o) {
}
bool Group::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 71: //surface
         return surface.set(device, object, type, mem);
      case 87: //volume
         return volume.set(device, object, type, mem);
      case 35: //light
         return light.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void Group::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 71: //surface
         surface.unset(device, object);
         return;
      case 87: //volume
         volume.unset(device, object);
         return;
      case 35: //light
         light.unset(device, object);
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& Group::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return surface;
      case 2: return volume;
      case 3: return light;
      default: return empty;
   }
}
ParameterBase& Group::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 71: return surface;
      case 87: return volume;
      case 35: return light;
      default: return empty;
   }
}
const char ** Group::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "surface",
      "volume",
      "light",
      nullptr
   };
   return paramnames;
}
size_t Group::paramCount() const {
   return 4;
}

Instance::Instance(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
      transform.set(device, object, ANARI_FLOAT32_MAT4, value);
   }
   {
      float value[] = {0.000000f, 1.000000f};
      time.set(device, object, ANARI_FLOAT32_BOX1, value);
   }
}
bool Instance::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 73: //transform
         return transform.set(device, object, type, mem);
      case 23: //group
         return group.set(device, object, type, mem);
      case 39: //motion.transform
         return motion_transform.set(device, object, type, mem);
      case 38: //motion.scale
         return motion_scale.set(device, object, type, mem);
      case 37: //motion.rotation
         return motion_rotation.set(device, object, type, mem);
      case 40: //motion.translation
         return motion_translation.set(device, object, type, mem);
      case 72: //time
         return time.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void Instance::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 73: //transform
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
            transform.set(device, object, ANARI_FLOAT32_MAT4, value);
         }
         return;
      case 23: //group
         group.unset(device, object);
         return;
      case 39: //motion.transform
         motion_transform.unset(device, object);
         return;
      case 38: //motion.scale
         motion_scale.unset(device, object);
         return;
      case 37: //motion.rotation
         motion_rotation.unset(device, object);
         return;
      case 40: //motion.translation
         motion_translation.unset(device, object);
         return;
      case 72: //time
         {
            float value[] = {0.000000f, 1.000000f};
            time.set(device, object, ANARI_FLOAT32_BOX1, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& Instance::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return transform;
      case 2: return group;
      case 3: return motion_transform;
      case 4: return motion_scale;
      case 5: return motion_rotation;
      case 6: return motion_translation;
      case 7: return time;
      default: return empty;
   }
}
ParameterBase& Instance::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 73: return transform;
      case 23: return group;
      case 39: return motion_transform;
      case 38: return motion_scale;
      case 37: return motion_rotation;
      case 40: return motion_translation;
      case 72: return time;
      default: return empty;
   }
}
const char ** Instance::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "transform",
      "group",
      "motion.transform",
      "motion.scale",
      "motion.rotation",
      "motion.translation",
      "time",
      nullptr
   };
   return paramnames;
}
size_t Instance::paramCount() const {
   return 8;
}

World::World(ANARIDevice device, ANARIObject o) : device(device), object(o) {
}
bool World::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 29: //instance
         return instance.set(device, object, type, mem);
      case 71: //surface
         return surface.set(device, object, type, mem);
      case 87: //volume
         return volume.set(device, object, type, mem);
      case 35: //light
         return light.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void World::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 29: //instance
         instance.unset(device, object);
         return;
      case 71: //surface
         surface.unset(device, object);
         return;
      case 87: //volume
         volume.unset(device, object);
         return;
      case 35: //light
         light.unset(device, object);
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& World::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return instance;
      case 2: return surface;
      case 3: return volume;
      case 4: return light;
      default: return empty;
   }
}
ParameterBase& World::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 29: return instance;
      case 71: return surface;
      case 87: return volume;
      case 35: return light;
      default: return empty;
   }
}
const char ** World::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "instance",
      "surface",
      "volume",
      "light",
      nullptr
   };
   return paramnames;
}
size_t World::paramCount() const {
   return 5;
}

RendererDefault::RendererDefault(ANARIDevice device, ANARIObject o) : device(device), object(o) {
}
bool RendererDefault::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void RendererDefault::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& RendererDefault::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      default: return empty;
   }
}
ParameterBase& RendererDefault::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      default: return empty;
   }
}
const char ** RendererDefault::paramNames() const {
   static const char *paramnames[] = {
      "name",
      nullptr
   };
   return paramnames;
}
size_t RendererDefault::paramCount() const {
   return 1;
}

Surface::Surface(ANARIDevice device, ANARIObject o) : device(device), object(o) {
}
bool Surface::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 22: //geometry
         return geometry.set(device, object, type, mem);
      case 36: //material
         return material.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void Surface::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 22: //geometry
         geometry.unset(device, object);
         return;
      case 36: //material
         material.unset(device, object);
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& Surface::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return geometry;
      case 2: return material;
      default: return empty;
   }
}
ParameterBase& Surface::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 22: return geometry;
      case 36: return material;
      default: return empty;
   }
}
const char ** Surface::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "geometry",
      "material",
      nullptr
   };
   return paramnames;
}
size_t Surface::paramCount() const {
   return 3;
}

CameraOmnidirectional::CameraOmnidirectional(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {0.000000f, 0.000000f, 0.000000f};
      position.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, -1.000000f};
      direction.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 1.000000f, 0.000000f};
      up.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f};
      transform.set(device, object, ANARI_FLOAT32_MAT3x4, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, 1.000000f, 1.000000f};
      imageRegion.set(device, object, ANARI_FLOAT32_BOX2, value);
   }
   {
      float value[] = {0.000000f};
      apertureRadius.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      focusDistance.set(device, object, ANARI_FLOAT32, value);
   }
   {
      const char *value = "none";
      stereoMode.set(device, object, ANARI_STRING, value);
   }
   {
      float value[] = {0.063500f};
      interpupillaryDistance.set(device, object, ANARI_FLOAT32, value);
   }
   {
      const char *value = "equirectangular";
      layout.set(device, object, ANARI_STRING, value);
   }
   {
      float value[] = {0.000000f, 1.000000f};
      time.set(device, object, ANARI_FLOAT32_BOX1, value);
   }
   {
      float value[] = {0.500000f, 0.500000f};
      shutter.set(device, object, ANARI_FLOAT32_BOX1, value);
   }
}
bool CameraOmnidirectional::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 49: //position
         return position.set(device, object, type, mem);
      case 14: //direction
         return direction.set(device, object, type, mem);
      case 74: //up
         return up.set(device, object, type, mem);
      case 73: //transform
         return transform.set(device, object, type, mem);
      case 25: //imageRegion
         return imageRegion.set(device, object, type, mem);
      case 3: //apertureRadius
         return apertureRadius.set(device, object, type, mem);
      case 20: //focusDistance
         return focusDistance.set(device, object, type, mem);
      case 70: //stereoMode
         return stereoMode.set(device, object, type, mem);
      case 32: //interpupillaryDistance
         return interpupillaryDistance.set(device, object, type, mem);
      case 34: //layout
         return layout.set(device, object, type, mem);
      case 39: //motion.transform
         return motion_transform.set(device, object, type, mem);
      case 38: //motion.scale
         return motion_scale.set(device, object, type, mem);
      case 37: //motion.rotation
         return motion_rotation.set(device, object, type, mem);
      case 40: //motion.translation
         return motion_translation.set(device, object, type, mem);
      case 72: //time
         return time.set(device, object, type, mem);
      case 64: //shutter
         return shutter.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void CameraOmnidirectional::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 49: //position
         {
            float value[] = {0.000000f, 0.000000f, 0.000000f};
            position.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 14: //direction
         {
            float value[] = {0.000000f, 0.000000f, -1.000000f};
            direction.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 74: //up
         {
            float value[] = {0.000000f, 1.000000f, 0.000000f};
            up.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 73: //transform
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f};
            transform.set(device, object, ANARI_FLOAT32_MAT3x4, value);
         }
         return;
      case 25: //imageRegion
         {
            float value[] = {0.000000f, 0.000000f, 1.000000f, 1.000000f};
            imageRegion.set(device, object, ANARI_FLOAT32_BOX2, value);
         }
         return;
      case 3: //apertureRadius
         {
            float value[] = {0.000000f};
            apertureRadius.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 20: //focusDistance
         {
            float value[] = {1.000000f};
            focusDistance.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 70: //stereoMode
         {
            const char *value = "none";
            stereoMode.set(device, object, ANARI_STRING, value);
         }
         return;
      case 32: //interpupillaryDistance
         {
            float value[] = {0.063500f};
            interpupillaryDistance.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 34: //layout
         {
            const char *value = "equirectangular";
            layout.set(device, object, ANARI_STRING, value);
         }
         return;
      case 39: //motion.transform
         motion_transform.unset(device, object);
         return;
      case 38: //motion.scale
         motion_scale.unset(device, object);
         return;
      case 37: //motion.rotation
         motion_rotation.unset(device, object);
         return;
      case 40: //motion.translation
         motion_translation.unset(device, object);
         return;
      case 72: //time
         {
            float value[] = {0.000000f, 1.000000f};
            time.set(device, object, ANARI_FLOAT32_BOX1, value);
         }
         return;
      case 64: //shutter
         {
            float value[] = {0.500000f, 0.500000f};
            shutter.set(device, object, ANARI_FLOAT32_BOX1, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& CameraOmnidirectional::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return position;
      case 2: return direction;
      case 3: return up;
      case 4: return transform;
      case 5: return imageRegion;
      case 6: return apertureRadius;
      case 7: return focusDistance;
      case 8: return stereoMode;
      case 9: return interpupillaryDistance;
      case 10: return layout;
      case 11: return motion_transform;
      case 12: return motion_scale;
      case 13: return motion_rotation;
      case 14: return motion_translation;
      case 15: return time;
      case 16: return shutter;
      default: return empty;
   }
}
ParameterBase& CameraOmnidirectional::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 49: return position;
      case 14: return direction;
      case 74: return up;
      case 73: return transform;
      case 25: return imageRegion;
      case 3: return apertureRadius;
      case 20: return focusDistance;
      case 70: return stereoMode;
      case 32: return interpupillaryDistance;
      case 34: return layout;
      case 39: return motion_transform;
      case 38: return motion_scale;
      case 37: return motion_rotation;
      case 40: return motion_translation;
      case 72: return time;
      case 64: return shutter;
      default: return empty;
   }
}
const char ** CameraOmnidirectional::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "position",
      "direction",
      "up",
      "transform",
      "imageRegion",
      "apertureRadius",
      "focusDistance",
      "stereoMode",
      "interpupillaryDistance",
      "layout",
      "motion.transform",
      "motion.scale",
      "motion.rotation",
      "motion.translation",
      "time",
      "shutter",
      nullptr
   };
   return paramnames;
}
size_t CameraOmnidirectional::paramCount() const {
   return 17;
}

CameraOrthographic::CameraOrthographic(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {0.000000f, 0.000000f, 0.000000f};
      position.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, -1.000000f};
      direction.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 1.000000f, 0.000000f};
      up.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f};
      transform.set(device, object, ANARI_FLOAT32_MAT3x4, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, 1.000000f, 1.000000f};
      imageRegion.set(device, object, ANARI_FLOAT32_BOX2, value);
   }
   {
      float value[] = {0.000000f};
      apertureRadius.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      focusDistance.set(device, object, ANARI_FLOAT32, value);
   }
   {
      const char *value = "none";
      stereoMode.set(device, object, ANARI_STRING, value);
   }
   {
      float value[] = {0.063500f};
      interpupillaryDistance.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      aspect.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {0.000000f, 1.000000f};
      time.set(device, object, ANARI_FLOAT32_BOX1, value);
   }
   {
      float value[] = {0.500000f, 0.500000f};
      shutter.set(device, object, ANARI_FLOAT32_BOX1, value);
   }
}
bool CameraOrthographic::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 49: //position
         return position.set(device, object, type, mem);
      case 14: //direction
         return direction.set(device, object, type, mem);
      case 74: //up
         return up.set(device, object, type, mem);
      case 73: //transform
         return transform.set(device, object, type, mem);
      case 25: //imageRegion
         return imageRegion.set(device, object, type, mem);
      case 3: //apertureRadius
         return apertureRadius.set(device, object, type, mem);
      case 20: //focusDistance
         return focusDistance.set(device, object, type, mem);
      case 70: //stereoMode
         return stereoMode.set(device, object, type, mem);
      case 32: //interpupillaryDistance
         return interpupillaryDistance.set(device, object, type, mem);
      case 5: //aspect
         return aspect.set(device, object, type, mem);
      case 39: //motion.transform
         return motion_transform.set(device, object, type, mem);
      case 38: //motion.scale
         return motion_scale.set(device, object, type, mem);
      case 37: //motion.rotation
         return motion_rotation.set(device, object, type, mem);
      case 40: //motion.translation
         return motion_translation.set(device, object, type, mem);
      case 72: //time
         return time.set(device, object, type, mem);
      case 64: //shutter
         return shutter.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void CameraOrthographic::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 49: //position
         {
            float value[] = {0.000000f, 0.000000f, 0.000000f};
            position.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 14: //direction
         {
            float value[] = {0.000000f, 0.000000f, -1.000000f};
            direction.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 74: //up
         {
            float value[] = {0.000000f, 1.000000f, 0.000000f};
            up.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 73: //transform
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f};
            transform.set(device, object, ANARI_FLOAT32_MAT3x4, value);
         }
         return;
      case 25: //imageRegion
         {
            float value[] = {0.000000f, 0.000000f, 1.000000f, 1.000000f};
            imageRegion.set(device, object, ANARI_FLOAT32_BOX2, value);
         }
         return;
      case 3: //apertureRadius
         {
            float value[] = {0.000000f};
            apertureRadius.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 20: //focusDistance
         {
            float value[] = {1.000000f};
            focusDistance.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 70: //stereoMode
         {
            const char *value = "none";
            stereoMode.set(device, object, ANARI_STRING, value);
         }
         return;
      case 32: //interpupillaryDistance
         {
            float value[] = {0.063500f};
            interpupillaryDistance.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 5: //aspect
         {
            float value[] = {1.000000f};
            aspect.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 39: //motion.transform
         motion_transform.unset(device, object);
         return;
      case 38: //motion.scale
         motion_scale.unset(device, object);
         return;
      case 37: //motion.rotation
         motion_rotation.unset(device, object);
         return;
      case 40: //motion.translation
         motion_translation.unset(device, object);
         return;
      case 72: //time
         {
            float value[] = {0.000000f, 1.000000f};
            time.set(device, object, ANARI_FLOAT32_BOX1, value);
         }
         return;
      case 64: //shutter
         {
            float value[] = {0.500000f, 0.500000f};
            shutter.set(device, object, ANARI_FLOAT32_BOX1, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& CameraOrthographic::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return position;
      case 2: return direction;
      case 3: return up;
      case 4: return transform;
      case 5: return imageRegion;
      case 6: return apertureRadius;
      case 7: return focusDistance;
      case 8: return stereoMode;
      case 9: return interpupillaryDistance;
      case 10: return aspect;
      case 11: return motion_transform;
      case 12: return motion_scale;
      case 13: return motion_rotation;
      case 14: return motion_translation;
      case 15: return time;
      case 16: return shutter;
      default: return empty;
   }
}
ParameterBase& CameraOrthographic::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 49: return position;
      case 14: return direction;
      case 74: return up;
      case 73: return transform;
      case 25: return imageRegion;
      case 3: return apertureRadius;
      case 20: return focusDistance;
      case 70: return stereoMode;
      case 32: return interpupillaryDistance;
      case 5: return aspect;
      case 39: return motion_transform;
      case 38: return motion_scale;
      case 37: return motion_rotation;
      case 40: return motion_translation;
      case 72: return time;
      case 64: return shutter;
      default: return empty;
   }
}
const char ** CameraOrthographic::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "position",
      "direction",
      "up",
      "transform",
      "imageRegion",
      "apertureRadius",
      "focusDistance",
      "stereoMode",
      "interpupillaryDistance",
      "aspect",
      "motion.transform",
      "motion.scale",
      "motion.rotation",
      "motion.translation",
      "time",
      "shutter",
      nullptr
   };
   return paramnames;
}
size_t CameraOrthographic::paramCount() const {
   return 17;
}

CameraPerspective::CameraPerspective(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {0.000000f, 0.000000f, 0.000000f};
      position.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, -1.000000f};
      direction.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 1.000000f, 0.000000f};
      up.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f};
      transform.set(device, object, ANARI_FLOAT32_MAT3x4, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, 1.000000f, 1.000000f};
      imageRegion.set(device, object, ANARI_FLOAT32_BOX2, value);
   }
   {
      float value[] = {0.000000f};
      apertureRadius.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      focusDistance.set(device, object, ANARI_FLOAT32, value);
   }
   {
      const char *value = "none";
      stereoMode.set(device, object, ANARI_STRING, value);
   }
   {
      float value[] = {0.063500f};
      interpupillaryDistance.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.047198f};
      fovy.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      aspect.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {0.000000f, 1.000000f};
      time.set(device, object, ANARI_FLOAT32_BOX1, value);
   }
   {
      float value[] = {0.500000f, 0.500000f};
      shutter.set(device, object, ANARI_FLOAT32_BOX1, value);
   }
}
bool CameraPerspective::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 49: //position
         return position.set(device, object, type, mem);
      case 14: //direction
         return direction.set(device, object, type, mem);
      case 74: //up
         return up.set(device, object, type, mem);
      case 73: //transform
         return transform.set(device, object, type, mem);
      case 25: //imageRegion
         return imageRegion.set(device, object, type, mem);
      case 3: //apertureRadius
         return apertureRadius.set(device, object, type, mem);
      case 20: //focusDistance
         return focusDistance.set(device, object, type, mem);
      case 70: //stereoMode
         return stereoMode.set(device, object, type, mem);
      case 32: //interpupillaryDistance
         return interpupillaryDistance.set(device, object, type, mem);
      case 21: //fovy
         return fovy.set(device, object, type, mem);
      case 5: //aspect
         return aspect.set(device, object, type, mem);
      case 39: //motion.transform
         return motion_transform.set(device, object, type, mem);
      case 38: //motion.scale
         return motion_scale.set(device, object, type, mem);
      case 37: //motion.rotation
         return motion_rotation.set(device, object, type, mem);
      case 40: //motion.translation
         return motion_translation.set(device, object, type, mem);
      case 72: //time
         return time.set(device, object, type, mem);
      case 64: //shutter
         return shutter.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void CameraPerspective::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 49: //position
         {
            float value[] = {0.000000f, 0.000000f, 0.000000f};
            position.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 14: //direction
         {
            float value[] = {0.000000f, 0.000000f, -1.000000f};
            direction.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 74: //up
         {
            float value[] = {0.000000f, 1.000000f, 0.000000f};
            up.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 73: //transform
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f};
            transform.set(device, object, ANARI_FLOAT32_MAT3x4, value);
         }
         return;
      case 25: //imageRegion
         {
            float value[] = {0.000000f, 0.000000f, 1.000000f, 1.000000f};
            imageRegion.set(device, object, ANARI_FLOAT32_BOX2, value);
         }
         return;
      case 3: //apertureRadius
         {
            float value[] = {0.000000f};
            apertureRadius.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 20: //focusDistance
         {
            float value[] = {1.000000f};
            focusDistance.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 70: //stereoMode
         {
            const char *value = "none";
            stereoMode.set(device, object, ANARI_STRING, value);
         }
         return;
      case 32: //interpupillaryDistance
         {
            float value[] = {0.063500f};
            interpupillaryDistance.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 21: //fovy
         {
            float value[] = {1.047198f};
            fovy.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 5: //aspect
         {
            float value[] = {1.000000f};
            aspect.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 39: //motion.transform
         motion_transform.unset(device, object);
         return;
      case 38: //motion.scale
         motion_scale.unset(device, object);
         return;
      case 37: //motion.rotation
         motion_rotation.unset(device, object);
         return;
      case 40: //motion.translation
         motion_translation.unset(device, object);
         return;
      case 72: //time
         {
            float value[] = {0.000000f, 1.000000f};
            time.set(device, object, ANARI_FLOAT32_BOX1, value);
         }
         return;
      case 64: //shutter
         {
            float value[] = {0.500000f, 0.500000f};
            shutter.set(device, object, ANARI_FLOAT32_BOX1, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& CameraPerspective::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return position;
      case 2: return direction;
      case 3: return up;
      case 4: return transform;
      case 5: return imageRegion;
      case 6: return apertureRadius;
      case 7: return focusDistance;
      case 8: return stereoMode;
      case 9: return interpupillaryDistance;
      case 10: return fovy;
      case 11: return aspect;
      case 12: return motion_transform;
      case 13: return motion_scale;
      case 14: return motion_rotation;
      case 15: return motion_translation;
      case 16: return time;
      case 17: return shutter;
      default: return empty;
   }
}
ParameterBase& CameraPerspective::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 49: return position;
      case 14: return direction;
      case 74: return up;
      case 73: return transform;
      case 25: return imageRegion;
      case 3: return apertureRadius;
      case 20: return focusDistance;
      case 70: return stereoMode;
      case 32: return interpupillaryDistance;
      case 21: return fovy;
      case 5: return aspect;
      case 39: return motion_transform;
      case 38: return motion_scale;
      case 37: return motion_rotation;
      case 40: return motion_translation;
      case 72: return time;
      case 64: return shutter;
      default: return empty;
   }
}
const char ** CameraPerspective::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "position",
      "direction",
      "up",
      "transform",
      "imageRegion",
      "apertureRadius",
      "focusDistance",
      "stereoMode",
      "interpupillaryDistance",
      "fovy",
      "aspect",
      "motion.transform",
      "motion.scale",
      "motion.rotation",
      "motion.translation",
      "time",
      "shutter",
      nullptr
   };
   return paramnames;
}
size_t CameraPerspective::paramCount() const {
   return 18;
}

GeometryCone::GeometryCone(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      const char *value = "none";
      caps.set(device, object, ANARI_STRING, value);
   }
}
bool GeometryCone::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 55: //primitive.color
         return primitive_color.set(device, object, type, mem);
      case 51: //primitive.attribute0
         return primitive_attribute0.set(device, object, type, mem);
      case 52: //primitive.attribute1
         return primitive_attribute1.set(device, object, type, mem);
      case 53: //primitive.attribute2
         return primitive_attribute2.set(device, object, type, mem);
      case 54: //primitive.attribute3
         return primitive_attribute3.set(device, object, type, mem);
      case 56: //primitive.id
         return primitive_id.set(device, object, type, mem);
      case 84: //vertex.position
         return vertex_position.set(device, object, type, mem);
      case 85: //vertex.radius
         return vertex_radius.set(device, object, type, mem);
      case 81: //vertex.cap
         return vertex_cap.set(device, object, type, mem);
      case 82: //vertex.color
         return vertex_color.set(device, object, type, mem);
      case 77: //vertex.attribute0
         return vertex_attribute0.set(device, object, type, mem);
      case 78: //vertex.attribute1
         return vertex_attribute1.set(device, object, type, mem);
      case 79: //vertex.attribute2
         return vertex_attribute2.set(device, object, type, mem);
      case 80: //vertex.attribute3
         return vertex_attribute3.set(device, object, type, mem);
      case 57: //primitive.index
         return primitive_index.set(device, object, type, mem);
      case 8: //caps
         return caps.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void GeometryCone::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 55: //primitive.color
         primitive_color.unset(device, object);
         return;
      case 51: //primitive.attribute0
         primitive_attribute0.unset(device, object);
         return;
      case 52: //primitive.attribute1
         primitive_attribute1.unset(device, object);
         return;
      case 53: //primitive.attribute2
         primitive_attribute2.unset(device, object);
         return;
      case 54: //primitive.attribute3
         primitive_attribute3.unset(device, object);
         return;
      case 56: //primitive.id
         primitive_id.unset(device, object);
         return;
      case 84: //vertex.position
         vertex_position.unset(device, object);
         return;
      case 85: //vertex.radius
         vertex_radius.unset(device, object);
         return;
      case 81: //vertex.cap
         vertex_cap.unset(device, object);
         return;
      case 82: //vertex.color
         vertex_color.unset(device, object);
         return;
      case 77: //vertex.attribute0
         vertex_attribute0.unset(device, object);
         return;
      case 78: //vertex.attribute1
         vertex_attribute1.unset(device, object);
         return;
      case 79: //vertex.attribute2
         vertex_attribute2.unset(device, object);
         return;
      case 80: //vertex.attribute3
         vertex_attribute3.unset(device, object);
         return;
      case 57: //primitive.index
         primitive_index.unset(device, object);
         return;
      case 8: //caps
         {
            const char *value = "none";
            caps.set(device, object, ANARI_STRING, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& GeometryCone::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return primitive_color;
      case 2: return primitive_attribute0;
      case 3: return primitive_attribute1;
      case 4: return primitive_attribute2;
      case 5: return primitive_attribute3;
      case 6: return primitive_id;
      case 7: return vertex_position;
      case 8: return vertex_radius;
      case 9: return vertex_cap;
      case 10: return vertex_color;
      case 11: return vertex_attribute0;
      case 12: return vertex_attribute1;
      case 13: return vertex_attribute2;
      case 14: return vertex_attribute3;
      case 15: return primitive_index;
      case 16: return caps;
      default: return empty;
   }
}
ParameterBase& GeometryCone::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 55: return primitive_color;
      case 51: return primitive_attribute0;
      case 52: return primitive_attribute1;
      case 53: return primitive_attribute2;
      case 54: return primitive_attribute3;
      case 56: return primitive_id;
      case 84: return vertex_position;
      case 85: return vertex_radius;
      case 81: return vertex_cap;
      case 82: return vertex_color;
      case 77: return vertex_attribute0;
      case 78: return vertex_attribute1;
      case 79: return vertex_attribute2;
      case 80: return vertex_attribute3;
      case 57: return primitive_index;
      case 8: return caps;
      default: return empty;
   }
}
const char ** GeometryCone::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "primitive.color",
      "primitive.attribute0",
      "primitive.attribute1",
      "primitive.attribute2",
      "primitive.attribute3",
      "primitive.id",
      "vertex.position",
      "vertex.radius",
      "vertex.cap",
      "vertex.color",
      "vertex.attribute0",
      "vertex.attribute1",
      "vertex.attribute2",
      "vertex.attribute3",
      "primitive.index",
      "caps",
      nullptr
   };
   return paramnames;
}
size_t GeometryCone::paramCount() const {
   return 17;
}

GeometryCurve::GeometryCurve(ANARIDevice device, ANARIObject o) : device(device), object(o) {
}
bool GeometryCurve::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 55: //primitive.color
         return primitive_color.set(device, object, type, mem);
      case 51: //primitive.attribute0
         return primitive_attribute0.set(device, object, type, mem);
      case 52: //primitive.attribute1
         return primitive_attribute1.set(device, object, type, mem);
      case 53: //primitive.attribute2
         return primitive_attribute2.set(device, object, type, mem);
      case 54: //primitive.attribute3
         return primitive_attribute3.set(device, object, type, mem);
      case 56: //primitive.id
         return primitive_id.set(device, object, type, mem);
      case 84: //vertex.position
         return vertex_position.set(device, object, type, mem);
      case 85: //vertex.radius
         return vertex_radius.set(device, object, type, mem);
      case 82: //vertex.color
         return vertex_color.set(device, object, type, mem);
      case 77: //vertex.attribute0
         return vertex_attribute0.set(device, object, type, mem);
      case 78: //vertex.attribute1
         return vertex_attribute1.set(device, object, type, mem);
      case 79: //vertex.attribute2
         return vertex_attribute2.set(device, object, type, mem);
      case 80: //vertex.attribute3
         return vertex_attribute3.set(device, object, type, mem);
      case 57: //primitive.index
         return primitive_index.set(device, object, type, mem);
      case 60: //radius
         return radius.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void GeometryCurve::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 55: //primitive.color
         primitive_color.unset(device, object);
         return;
      case 51: //primitive.attribute0
         primitive_attribute0.unset(device, object);
         return;
      case 52: //primitive.attribute1
         primitive_attribute1.unset(device, object);
         return;
      case 53: //primitive.attribute2
         primitive_attribute2.unset(device, object);
         return;
      case 54: //primitive.attribute3
         primitive_attribute3.unset(device, object);
         return;
      case 56: //primitive.id
         primitive_id.unset(device, object);
         return;
      case 84: //vertex.position
         vertex_position.unset(device, object);
         return;
      case 85: //vertex.radius
         vertex_radius.unset(device, object);
         return;
      case 82: //vertex.color
         vertex_color.unset(device, object);
         return;
      case 77: //vertex.attribute0
         vertex_attribute0.unset(device, object);
         return;
      case 78: //vertex.attribute1
         vertex_attribute1.unset(device, object);
         return;
      case 79: //vertex.attribute2
         vertex_attribute2.unset(device, object);
         return;
      case 80: //vertex.attribute3
         vertex_attribute3.unset(device, object);
         return;
      case 57: //primitive.index
         primitive_index.unset(device, object);
         return;
      case 60: //radius
         radius.unset(device, object);
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& GeometryCurve::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return primitive_color;
      case 2: return primitive_attribute0;
      case 3: return primitive_attribute1;
      case 4: return primitive_attribute2;
      case 5: return primitive_attribute3;
      case 6: return primitive_id;
      case 7: return vertex_position;
      case 8: return vertex_radius;
      case 9: return vertex_color;
      case 10: return vertex_attribute0;
      case 11: return vertex_attribute1;
      case 12: return vertex_attribute2;
      case 13: return vertex_attribute3;
      case 14: return primitive_index;
      case 15: return radius;
      default: return empty;
   }
}
ParameterBase& GeometryCurve::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 55: return primitive_color;
      case 51: return primitive_attribute0;
      case 52: return primitive_attribute1;
      case 53: return primitive_attribute2;
      case 54: return primitive_attribute3;
      case 56: return primitive_id;
      case 84: return vertex_position;
      case 85: return vertex_radius;
      case 82: return vertex_color;
      case 77: return vertex_attribute0;
      case 78: return vertex_attribute1;
      case 79: return vertex_attribute2;
      case 80: return vertex_attribute3;
      case 57: return primitive_index;
      case 60: return radius;
      default: return empty;
   }
}
const char ** GeometryCurve::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "primitive.color",
      "primitive.attribute0",
      "primitive.attribute1",
      "primitive.attribute2",
      "primitive.attribute3",
      "primitive.id",
      "vertex.position",
      "vertex.radius",
      "vertex.color",
      "vertex.attribute0",
      "vertex.attribute1",
      "vertex.attribute2",
      "vertex.attribute3",
      "primitive.index",
      "radius",
      nullptr
   };
   return paramnames;
}
size_t GeometryCurve::paramCount() const {
   return 16;
}

GeometryCylinder::GeometryCylinder(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      const char *value = "none";
      caps.set(device, object, ANARI_STRING, value);
   }
}
bool GeometryCylinder::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 55: //primitive.color
         return primitive_color.set(device, object, type, mem);
      case 51: //primitive.attribute0
         return primitive_attribute0.set(device, object, type, mem);
      case 52: //primitive.attribute1
         return primitive_attribute1.set(device, object, type, mem);
      case 53: //primitive.attribute2
         return primitive_attribute2.set(device, object, type, mem);
      case 54: //primitive.attribute3
         return primitive_attribute3.set(device, object, type, mem);
      case 56: //primitive.id
         return primitive_id.set(device, object, type, mem);
      case 84: //vertex.position
         return vertex_position.set(device, object, type, mem);
      case 81: //vertex.cap
         return vertex_cap.set(device, object, type, mem);
      case 82: //vertex.color
         return vertex_color.set(device, object, type, mem);
      case 77: //vertex.attribute0
         return vertex_attribute0.set(device, object, type, mem);
      case 78: //vertex.attribute1
         return vertex_attribute1.set(device, object, type, mem);
      case 79: //vertex.attribute2
         return vertex_attribute2.set(device, object, type, mem);
      case 80: //vertex.attribute3
         return vertex_attribute3.set(device, object, type, mem);
      case 57: //primitive.index
         return primitive_index.set(device, object, type, mem);
      case 58: //primitive.radius
         return primitive_radius.set(device, object, type, mem);
      case 60: //radius
         return radius.set(device, object, type, mem);
      case 8: //caps
         return caps.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void GeometryCylinder::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 55: //primitive.color
         primitive_color.unset(device, object);
         return;
      case 51: //primitive.attribute0
         primitive_attribute0.unset(device, object);
         return;
      case 52: //primitive.attribute1
         primitive_attribute1.unset(device, object);
         return;
      case 53: //primitive.attribute2
         primitive_attribute2.unset(device, object);
         return;
      case 54: //primitive.attribute3
         primitive_attribute3.unset(device, object);
         return;
      case 56: //primitive.id
         primitive_id.unset(device, object);
         return;
      case 84: //vertex.position
         vertex_position.unset(device, object);
         return;
      case 81: //vertex.cap
         vertex_cap.unset(device, object);
         return;
      case 82: //vertex.color
         vertex_color.unset(device, object);
         return;
      case 77: //vertex.attribute0
         vertex_attribute0.unset(device, object);
         return;
      case 78: //vertex.attribute1
         vertex_attribute1.unset(device, object);
         return;
      case 79: //vertex.attribute2
         vertex_attribute2.unset(device, object);
         return;
      case 80: //vertex.attribute3
         vertex_attribute3.unset(device, object);
         return;
      case 57: //primitive.index
         primitive_index.unset(device, object);
         return;
      case 58: //primitive.radius
         primitive_radius.unset(device, object);
         return;
      case 60: //radius
         radius.unset(device, object);
         return;
      case 8: //caps
         {
            const char *value = "none";
            caps.set(device, object, ANARI_STRING, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& GeometryCylinder::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return primitive_color;
      case 2: return primitive_attribute0;
      case 3: return primitive_attribute1;
      case 4: return primitive_attribute2;
      case 5: return primitive_attribute3;
      case 6: return primitive_id;
      case 7: return vertex_position;
      case 8: return vertex_cap;
      case 9: return vertex_color;
      case 10: return vertex_attribute0;
      case 11: return vertex_attribute1;
      case 12: return vertex_attribute2;
      case 13: return vertex_attribute3;
      case 14: return primitive_index;
      case 15: return primitive_radius;
      case 16: return radius;
      case 17: return caps;
      default: return empty;
   }
}
ParameterBase& GeometryCylinder::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 55: return primitive_color;
      case 51: return primitive_attribute0;
      case 52: return primitive_attribute1;
      case 53: return primitive_attribute2;
      case 54: return primitive_attribute3;
      case 56: return primitive_id;
      case 84: return vertex_position;
      case 81: return vertex_cap;
      case 82: return vertex_color;
      case 77: return vertex_attribute0;
      case 78: return vertex_attribute1;
      case 79: return vertex_attribute2;
      case 80: return vertex_attribute3;
      case 57: return primitive_index;
      case 58: return primitive_radius;
      case 60: return radius;
      case 8: return caps;
      default: return empty;
   }
}
const char ** GeometryCylinder::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "primitive.color",
      "primitive.attribute0",
      "primitive.attribute1",
      "primitive.attribute2",
      "primitive.attribute3",
      "primitive.id",
      "vertex.position",
      "vertex.cap",
      "vertex.color",
      "vertex.attribute0",
      "vertex.attribute1",
      "vertex.attribute2",
      "vertex.attribute3",
      "primitive.index",
      "primitive.radius",
      "radius",
      "caps",
      nullptr
   };
   return paramnames;
}
size_t GeometryCylinder::paramCount() const {
   return 18;
}

GeometryQuad::GeometryQuad(ANARIDevice device, ANARIObject o) : device(device), object(o) {
}
bool GeometryQuad::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 55: //primitive.color
         return primitive_color.set(device, object, type, mem);
      case 51: //primitive.attribute0
         return primitive_attribute0.set(device, object, type, mem);
      case 52: //primitive.attribute1
         return primitive_attribute1.set(device, object, type, mem);
      case 53: //primitive.attribute2
         return primitive_attribute2.set(device, object, type, mem);
      case 54: //primitive.attribute3
         return primitive_attribute3.set(device, object, type, mem);
      case 56: //primitive.id
         return primitive_id.set(device, object, type, mem);
      case 84: //vertex.position
         return vertex_position.set(device, object, type, mem);
      case 83: //vertex.normal
         return vertex_normal.set(device, object, type, mem);
      case 82: //vertex.color
         return vertex_color.set(device, object, type, mem);
      case 77: //vertex.attribute0
         return vertex_attribute0.set(device, object, type, mem);
      case 78: //vertex.attribute1
         return vertex_attribute1.set(device, object, type, mem);
      case 79: //vertex.attribute2
         return vertex_attribute2.set(device, object, type, mem);
      case 80: //vertex.attribute3
         return vertex_attribute3.set(device, object, type, mem);
      case 57: //primitive.index
         return primitive_index.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void GeometryQuad::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 55: //primitive.color
         primitive_color.unset(device, object);
         return;
      case 51: //primitive.attribute0
         primitive_attribute0.unset(device, object);
         return;
      case 52: //primitive.attribute1
         primitive_attribute1.unset(device, object);
         return;
      case 53: //primitive.attribute2
         primitive_attribute2.unset(device, object);
         return;
      case 54: //primitive.attribute3
         primitive_attribute3.unset(device, object);
         return;
      case 56: //primitive.id
         primitive_id.unset(device, object);
         return;
      case 84: //vertex.position
         vertex_position.unset(device, object);
         return;
      case 83: //vertex.normal
         vertex_normal.unset(device, object);
         return;
      case 82: //vertex.color
         vertex_color.unset(device, object);
         return;
      case 77: //vertex.attribute0
         vertex_attribute0.unset(device, object);
         return;
      case 78: //vertex.attribute1
         vertex_attribute1.unset(device, object);
         return;
      case 79: //vertex.attribute2
         vertex_attribute2.unset(device, object);
         return;
      case 80: //vertex.attribute3
         vertex_attribute3.unset(device, object);
         return;
      case 57: //primitive.index
         primitive_index.unset(device, object);
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& GeometryQuad::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return primitive_color;
      case 2: return primitive_attribute0;
      case 3: return primitive_attribute1;
      case 4: return primitive_attribute2;
      case 5: return primitive_attribute3;
      case 6: return primitive_id;
      case 7: return vertex_position;
      case 8: return vertex_normal;
      case 9: return vertex_color;
      case 10: return vertex_attribute0;
      case 11: return vertex_attribute1;
      case 12: return vertex_attribute2;
      case 13: return vertex_attribute3;
      case 14: return primitive_index;
      default: return empty;
   }
}
ParameterBase& GeometryQuad::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 55: return primitive_color;
      case 51: return primitive_attribute0;
      case 52: return primitive_attribute1;
      case 53: return primitive_attribute2;
      case 54: return primitive_attribute3;
      case 56: return primitive_id;
      case 84: return vertex_position;
      case 83: return vertex_normal;
      case 82: return vertex_color;
      case 77: return vertex_attribute0;
      case 78: return vertex_attribute1;
      case 79: return vertex_attribute2;
      case 80: return vertex_attribute3;
      case 57: return primitive_index;
      default: return empty;
   }
}
const char ** GeometryQuad::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "primitive.color",
      "primitive.attribute0",
      "primitive.attribute1",
      "primitive.attribute2",
      "primitive.attribute3",
      "primitive.id",
      "vertex.position",
      "vertex.normal",
      "vertex.color",
      "vertex.attribute0",
      "vertex.attribute1",
      "vertex.attribute2",
      "vertex.attribute3",
      "primitive.index",
      nullptr
   };
   return paramnames;
}
size_t GeometryQuad::paramCount() const {
   return 15;
}

GeometrySphere::GeometrySphere(ANARIDevice device, ANARIObject o) : device(device), object(o) {
}
bool GeometrySphere::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 55: //primitive.color
         return primitive_color.set(device, object, type, mem);
      case 51: //primitive.attribute0
         return primitive_attribute0.set(device, object, type, mem);
      case 52: //primitive.attribute1
         return primitive_attribute1.set(device, object, type, mem);
      case 53: //primitive.attribute2
         return primitive_attribute2.set(device, object, type, mem);
      case 54: //primitive.attribute3
         return primitive_attribute3.set(device, object, type, mem);
      case 56: //primitive.id
         return primitive_id.set(device, object, type, mem);
      case 84: //vertex.position
         return vertex_position.set(device, object, type, mem);
      case 85: //vertex.radius
         return vertex_radius.set(device, object, type, mem);
      case 82: //vertex.color
         return vertex_color.set(device, object, type, mem);
      case 77: //vertex.attribute0
         return vertex_attribute0.set(device, object, type, mem);
      case 78: //vertex.attribute1
         return vertex_attribute1.set(device, object, type, mem);
      case 79: //vertex.attribute2
         return vertex_attribute2.set(device, object, type, mem);
      case 80: //vertex.attribute3
         return vertex_attribute3.set(device, object, type, mem);
      case 57: //primitive.index
         return primitive_index.set(device, object, type, mem);
      case 60: //radius
         return radius.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void GeometrySphere::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 55: //primitive.color
         primitive_color.unset(device, object);
         return;
      case 51: //primitive.attribute0
         primitive_attribute0.unset(device, object);
         return;
      case 52: //primitive.attribute1
         primitive_attribute1.unset(device, object);
         return;
      case 53: //primitive.attribute2
         primitive_attribute2.unset(device, object);
         return;
      case 54: //primitive.attribute3
         primitive_attribute3.unset(device, object);
         return;
      case 56: //primitive.id
         primitive_id.unset(device, object);
         return;
      case 84: //vertex.position
         vertex_position.unset(device, object);
         return;
      case 85: //vertex.radius
         vertex_radius.unset(device, object);
         return;
      case 82: //vertex.color
         vertex_color.unset(device, object);
         return;
      case 77: //vertex.attribute0
         vertex_attribute0.unset(device, object);
         return;
      case 78: //vertex.attribute1
         vertex_attribute1.unset(device, object);
         return;
      case 79: //vertex.attribute2
         vertex_attribute2.unset(device, object);
         return;
      case 80: //vertex.attribute3
         vertex_attribute3.unset(device, object);
         return;
      case 57: //primitive.index
         primitive_index.unset(device, object);
         return;
      case 60: //radius
         radius.unset(device, object);
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& GeometrySphere::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return primitive_color;
      case 2: return primitive_attribute0;
      case 3: return primitive_attribute1;
      case 4: return primitive_attribute2;
      case 5: return primitive_attribute3;
      case 6: return primitive_id;
      case 7: return vertex_position;
      case 8: return vertex_radius;
      case 9: return vertex_color;
      case 10: return vertex_attribute0;
      case 11: return vertex_attribute1;
      case 12: return vertex_attribute2;
      case 13: return vertex_attribute3;
      case 14: return primitive_index;
      case 15: return radius;
      default: return empty;
   }
}
ParameterBase& GeometrySphere::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 55: return primitive_color;
      case 51: return primitive_attribute0;
      case 52: return primitive_attribute1;
      case 53: return primitive_attribute2;
      case 54: return primitive_attribute3;
      case 56: return primitive_id;
      case 84: return vertex_position;
      case 85: return vertex_radius;
      case 82: return vertex_color;
      case 77: return vertex_attribute0;
      case 78: return vertex_attribute1;
      case 79: return vertex_attribute2;
      case 80: return vertex_attribute3;
      case 57: return primitive_index;
      case 60: return radius;
      default: return empty;
   }
}
const char ** GeometrySphere::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "primitive.color",
      "primitive.attribute0",
      "primitive.attribute1",
      "primitive.attribute2",
      "primitive.attribute3",
      "primitive.id",
      "vertex.position",
      "vertex.radius",
      "vertex.color",
      "vertex.attribute0",
      "vertex.attribute1",
      "vertex.attribute2",
      "vertex.attribute3",
      "primitive.index",
      "radius",
      nullptr
   };
   return paramnames;
}
size_t GeometrySphere::paramCount() const {
   return 16;
}

GeometryTriangle::GeometryTriangle(ANARIDevice device, ANARIObject o) : device(device), object(o) {
}
bool GeometryTriangle::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 55: //primitive.color
         return primitive_color.set(device, object, type, mem);
      case 51: //primitive.attribute0
         return primitive_attribute0.set(device, object, type, mem);
      case 52: //primitive.attribute1
         return primitive_attribute1.set(device, object, type, mem);
      case 53: //primitive.attribute2
         return primitive_attribute2.set(device, object, type, mem);
      case 54: //primitive.attribute3
         return primitive_attribute3.set(device, object, type, mem);
      case 56: //primitive.id
         return primitive_id.set(device, object, type, mem);
      case 84: //vertex.position
         return vertex_position.set(device, object, type, mem);
      case 83: //vertex.normal
         return vertex_normal.set(device, object, type, mem);
      case 82: //vertex.color
         return vertex_color.set(device, object, type, mem);
      case 77: //vertex.attribute0
         return vertex_attribute0.set(device, object, type, mem);
      case 78: //vertex.attribute1
         return vertex_attribute1.set(device, object, type, mem);
      case 79: //vertex.attribute2
         return vertex_attribute2.set(device, object, type, mem);
      case 80: //vertex.attribute3
         return vertex_attribute3.set(device, object, type, mem);
      case 57: //primitive.index
         return primitive_index.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void GeometryTriangle::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 55: //primitive.color
         primitive_color.unset(device, object);
         return;
      case 51: //primitive.attribute0
         primitive_attribute0.unset(device, object);
         return;
      case 52: //primitive.attribute1
         primitive_attribute1.unset(device, object);
         return;
      case 53: //primitive.attribute2
         primitive_attribute2.unset(device, object);
         return;
      case 54: //primitive.attribute3
         primitive_attribute3.unset(device, object);
         return;
      case 56: //primitive.id
         primitive_id.unset(device, object);
         return;
      case 84: //vertex.position
         vertex_position.unset(device, object);
         return;
      case 83: //vertex.normal
         vertex_normal.unset(device, object);
         return;
      case 82: //vertex.color
         vertex_color.unset(device, object);
         return;
      case 77: //vertex.attribute0
         vertex_attribute0.unset(device, object);
         return;
      case 78: //vertex.attribute1
         vertex_attribute1.unset(device, object);
         return;
      case 79: //vertex.attribute2
         vertex_attribute2.unset(device, object);
         return;
      case 80: //vertex.attribute3
         vertex_attribute3.unset(device, object);
         return;
      case 57: //primitive.index
         primitive_index.unset(device, object);
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& GeometryTriangle::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return primitive_color;
      case 2: return primitive_attribute0;
      case 3: return primitive_attribute1;
      case 4: return primitive_attribute2;
      case 5: return primitive_attribute3;
      case 6: return primitive_id;
      case 7: return vertex_position;
      case 8: return vertex_normal;
      case 9: return vertex_color;
      case 10: return vertex_attribute0;
      case 11: return vertex_attribute1;
      case 12: return vertex_attribute2;
      case 13: return vertex_attribute3;
      case 14: return primitive_index;
      default: return empty;
   }
}
ParameterBase& GeometryTriangle::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 55: return primitive_color;
      case 51: return primitive_attribute0;
      case 52: return primitive_attribute1;
      case 53: return primitive_attribute2;
      case 54: return primitive_attribute3;
      case 56: return primitive_id;
      case 84: return vertex_position;
      case 83: return vertex_normal;
      case 82: return vertex_color;
      case 77: return vertex_attribute0;
      case 78: return vertex_attribute1;
      case 79: return vertex_attribute2;
      case 80: return vertex_attribute3;
      case 57: return primitive_index;
      default: return empty;
   }
}
const char ** GeometryTriangle::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "primitive.color",
      "primitive.attribute0",
      "primitive.attribute1",
      "primitive.attribute2",
      "primitive.attribute3",
      "primitive.id",
      "vertex.position",
      "vertex.normal",
      "vertex.color",
      "vertex.attribute0",
      "vertex.attribute1",
      "vertex.attribute2",
      "vertex.attribute3",
      "primitive.index",
      nullptr
   };
   return paramnames;
}
size_t GeometryTriangle::paramCount() const {
   return 15;
}

LightDirectional::LightDirectional(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {1.000000f, 1.000000f, 1.000000f};
      color.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {1.000000f};
      irridance.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, 1.000000f};
      direction.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f};
      angularDiameter.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      radiance.set(device, object, ANARI_FLOAT32, value);
   }
   {
      int32_t value[] = {INT32_C(1)};
      visible.set(device, object, ANARI_BOOL, value);
   }
}
bool LightDirectional::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 9: //color
         return color.set(device, object, type, mem);
      case 33: //irridance
         return irridance.set(device, object, type, mem);
      case 14: //direction
         return direction.set(device, object, type, mem);
      case 2: //angularDiameter
         return angularDiameter.set(device, object, type, mem);
      case 59: //radiance
         return radiance.set(device, object, type, mem);
      case 86: //visible
         return visible.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void LightDirectional::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 9: //color
         {
            float value[] = {1.000000f, 1.000000f, 1.000000f};
            color.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 33: //irridance
         {
            float value[] = {1.000000f};
            irridance.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 14: //direction
         {
            float value[] = {0.000000f, 0.000000f, 1.000000f};
            direction.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 2: //angularDiameter
         {
            float value[] = {0.000000f};
            angularDiameter.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 59: //radiance
         {
            float value[] = {1.000000f};
            radiance.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 86: //visible
         {
            int32_t value[] = {INT32_C(1)};
            visible.set(device, object, ANARI_BOOL, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& LightDirectional::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return color;
      case 2: return irridance;
      case 3: return direction;
      case 4: return angularDiameter;
      case 5: return radiance;
      case 6: return visible;
      default: return empty;
   }
}
ParameterBase& LightDirectional::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 9: return color;
      case 33: return irridance;
      case 14: return direction;
      case 2: return angularDiameter;
      case 59: return radiance;
      case 86: return visible;
      default: return empty;
   }
}
const char ** LightDirectional::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "color",
      "irridance",
      "direction",
      "angularDiameter",
      "radiance",
      "visible",
      nullptr
   };
   return paramnames;
}
size_t LightDirectional::paramCount() const {
   return 7;
}

LightPoint::LightPoint(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {1.000000f, 1.000000f, 1.000000f};
      color.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, 0.000000f};
      position.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {1.000000f};
      intensity.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      power.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {0.000000f};
      radius.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      radiance.set(device, object, ANARI_FLOAT32, value);
   }
   {
      int32_t value[] = {INT32_C(1)};
      visible.set(device, object, ANARI_BOOL, value);
   }
}
bool LightPoint::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 9: //color
         return color.set(device, object, type, mem);
      case 49: //position
         return position.set(device, object, type, mem);
      case 30: //intensity
         return intensity.set(device, object, type, mem);
      case 50: //power
         return power.set(device, object, type, mem);
      case 60: //radius
         return radius.set(device, object, type, mem);
      case 59: //radiance
         return radiance.set(device, object, type, mem);
      case 86: //visible
         return visible.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void LightPoint::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 9: //color
         {
            float value[] = {1.000000f, 1.000000f, 1.000000f};
            color.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 49: //position
         {
            float value[] = {0.000000f, 0.000000f, 0.000000f};
            position.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 30: //intensity
         {
            float value[] = {1.000000f};
            intensity.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 50: //power
         {
            float value[] = {1.000000f};
            power.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 60: //radius
         {
            float value[] = {0.000000f};
            radius.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 59: //radiance
         {
            float value[] = {1.000000f};
            radiance.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 86: //visible
         {
            int32_t value[] = {INT32_C(1)};
            visible.set(device, object, ANARI_BOOL, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& LightPoint::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return color;
      case 2: return position;
      case 3: return intensity;
      case 4: return power;
      case 5: return radius;
      case 6: return radiance;
      case 7: return visible;
      default: return empty;
   }
}
ParameterBase& LightPoint::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 9: return color;
      case 49: return position;
      case 30: return intensity;
      case 50: return power;
      case 60: return radius;
      case 59: return radiance;
      case 86: return visible;
      default: return empty;
   }
}
const char ** LightPoint::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "color",
      "position",
      "intensity",
      "power",
      "radius",
      "radiance",
      "visible",
      nullptr
   };
   return paramnames;
}
size_t LightPoint::paramCount() const {
   return 8;
}

LightSpot::LightSpot(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {1.000000f, 1.000000f, 1.000000f};
      color.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, 0.000000f};
      position.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, -1.000000f};
      direction.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {3.141593f};
      openingAngle.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {0.100000f};
      falloffAngle.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      intensity.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      power.set(device, object, ANARI_FLOAT32, value);
   }
}
bool LightSpot::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 9: //color
         return color.set(device, object, type, mem);
      case 49: //position
         return position.set(device, object, type, mem);
      case 14: //direction
         return direction.set(device, object, type, mem);
      case 46: //openingAngle
         return openingAngle.set(device, object, type, mem);
      case 17: //falloffAngle
         return falloffAngle.set(device, object, type, mem);
      case 30: //intensity
         return intensity.set(device, object, type, mem);
      case 50: //power
         return power.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void LightSpot::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 9: //color
         {
            float value[] = {1.000000f, 1.000000f, 1.000000f};
            color.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 49: //position
         {
            float value[] = {0.000000f, 0.000000f, 0.000000f};
            position.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 14: //direction
         {
            float value[] = {0.000000f, 0.000000f, -1.000000f};
            direction.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 46: //openingAngle
         {
            float value[] = {3.141593f};
            openingAngle.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 17: //falloffAngle
         {
            float value[] = {0.100000f};
            falloffAngle.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 30: //intensity
         {
            float value[] = {1.000000f};
            intensity.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 50: //power
         {
            float value[] = {1.000000f};
            power.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& LightSpot::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return color;
      case 2: return position;
      case 3: return direction;
      case 4: return openingAngle;
      case 5: return falloffAngle;
      case 6: return intensity;
      case 7: return power;
      default: return empty;
   }
}
ParameterBase& LightSpot::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 9: return color;
      case 49: return position;
      case 14: return direction;
      case 46: return openingAngle;
      case 17: return falloffAngle;
      case 30: return intensity;
      case 50: return power;
      default: return empty;
   }
}
const char ** LightSpot::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "color",
      "position",
      "direction",
      "openingAngle",
      "falloffAngle",
      "intensity",
      "power",
      nullptr
   };
   return paramnames;
}
size_t LightSpot::paramCount() const {
   return 8;
}

MaterialMatte::MaterialMatte(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {0.800000f, 0.800000f, 0.800000f};
      color.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
}
bool MaterialMatte::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 9: //color
         return color.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void MaterialMatte::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 9: //color
         {
            float value[] = {0.800000f, 0.800000f, 0.800000f};
            color.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& MaterialMatte::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return color;
      default: return empty;
   }
}
ParameterBase& MaterialMatte::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 9: return color;
      default: return empty;
   }
}
const char ** MaterialMatte::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "color",
      nullptr
   };
   return paramnames;
}
size_t MaterialMatte::paramCount() const {
   return 2;
}

MaterialTransparentMatte::MaterialTransparentMatte(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {0.800000f, 0.800000f, 0.800000f};
      color.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {1.000000f};
      opacity.set(device, object, ANARI_FLOAT32, value);
   }
}
bool MaterialTransparentMatte::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 9: //color
         return color.set(device, object, type, mem);
      case 44: //opacity
         return opacity.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void MaterialTransparentMatte::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 9: //color
         {
            float value[] = {0.800000f, 0.800000f, 0.800000f};
            color.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 44: //opacity
         {
            float value[] = {1.000000f};
            opacity.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& MaterialTransparentMatte::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return color;
      case 2: return opacity;
      default: return empty;
   }
}
ParameterBase& MaterialTransparentMatte::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 9: return color;
      case 44: return opacity;
      default: return empty;
   }
}
const char ** MaterialTransparentMatte::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "color",
      "opacity",
      nullptr
   };
   return paramnames;
}
size_t MaterialTransparentMatte::paramCount() const {
   return 3;
}

SamplerImage1D::SamplerImage1D(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      const char *value = "attribute0";
      inAttribute.set(device, object, ANARI_STRING, value);
   }
   {
      const char *value = "nearest";
      filter.set(device, object, ANARI_STRING, value);
   }
   {
      const char *value = "clampToEdge";
      wrapMode1.set(device, object, ANARI_STRING, value);
   }
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
      inTransform.set(device, object, ANARI_FLOAT32_MAT4, value);
   }
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
      outTransform.set(device, object, ANARI_FLOAT32_MAT4, value);
   }
}
bool SamplerImage1D::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 24: //image
         return image.set(device, object, type, mem);
      case 26: //inAttribute
         return inAttribute.set(device, object, type, mem);
      case 19: //filter
         return filter.set(device, object, type, mem);
      case 89: //wrapMode1
         return wrapMode1.set(device, object, type, mem);
      case 27: //inTransform
         return inTransform.set(device, object, type, mem);
      case 48: //outTransform
         return outTransform.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void SamplerImage1D::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 24: //image
         image.unset(device, object);
         return;
      case 26: //inAttribute
         {
            const char *value = "attribute0";
            inAttribute.set(device, object, ANARI_STRING, value);
         }
         return;
      case 19: //filter
         {
            const char *value = "nearest";
            filter.set(device, object, ANARI_STRING, value);
         }
         return;
      case 89: //wrapMode1
         {
            const char *value = "clampToEdge";
            wrapMode1.set(device, object, ANARI_STRING, value);
         }
         return;
      case 27: //inTransform
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
            inTransform.set(device, object, ANARI_FLOAT32_MAT4, value);
         }
         return;
      case 48: //outTransform
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
            outTransform.set(device, object, ANARI_FLOAT32_MAT4, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& SamplerImage1D::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return image;
      case 2: return inAttribute;
      case 3: return filter;
      case 4: return wrapMode1;
      case 5: return inTransform;
      case 6: return outTransform;
      default: return empty;
   }
}
ParameterBase& SamplerImage1D::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 24: return image;
      case 26: return inAttribute;
      case 19: return filter;
      case 89: return wrapMode1;
      case 27: return inTransform;
      case 48: return outTransform;
      default: return empty;
   }
}
const char ** SamplerImage1D::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "image",
      "inAttribute",
      "filter",
      "wrapMode1",
      "inTransform",
      "outTransform",
      nullptr
   };
   return paramnames;
}
size_t SamplerImage1D::paramCount() const {
   return 7;
}

SamplerImage2D::SamplerImage2D(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      const char *value = "attribute0";
      inAttribute.set(device, object, ANARI_STRING, value);
   }
   {
      const char *value = "nearest";
      filter.set(device, object, ANARI_STRING, value);
   }
   {
      const char *value = "clampToEdge";
      wrapMode1.set(device, object, ANARI_STRING, value);
   }
   {
      const char *value = "clampToEdge";
      wrapMode2.set(device, object, ANARI_STRING, value);
   }
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
      inTransform.set(device, object, ANARI_FLOAT32_MAT4, value);
   }
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
      outTransform.set(device, object, ANARI_FLOAT32_MAT4, value);
   }
}
bool SamplerImage2D::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 24: //image
         return image.set(device, object, type, mem);
      case 26: //inAttribute
         return inAttribute.set(device, object, type, mem);
      case 19: //filter
         return filter.set(device, object, type, mem);
      case 89: //wrapMode1
         return wrapMode1.set(device, object, type, mem);
      case 90: //wrapMode2
         return wrapMode2.set(device, object, type, mem);
      case 27: //inTransform
         return inTransform.set(device, object, type, mem);
      case 48: //outTransform
         return outTransform.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void SamplerImage2D::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 24: //image
         image.unset(device, object);
         return;
      case 26: //inAttribute
         {
            const char *value = "attribute0";
            inAttribute.set(device, object, ANARI_STRING, value);
         }
         return;
      case 19: //filter
         {
            const char *value = "nearest";
            filter.set(device, object, ANARI_STRING, value);
         }
         return;
      case 89: //wrapMode1
         {
            const char *value = "clampToEdge";
            wrapMode1.set(device, object, ANARI_STRING, value);
         }
         return;
      case 90: //wrapMode2
         {
            const char *value = "clampToEdge";
            wrapMode2.set(device, object, ANARI_STRING, value);
         }
         return;
      case 27: //inTransform
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
            inTransform.set(device, object, ANARI_FLOAT32_MAT4, value);
         }
         return;
      case 48: //outTransform
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
            outTransform.set(device, object, ANARI_FLOAT32_MAT4, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& SamplerImage2D::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return image;
      case 2: return inAttribute;
      case 3: return filter;
      case 4: return wrapMode1;
      case 5: return wrapMode2;
      case 6: return inTransform;
      case 7: return outTransform;
      default: return empty;
   }
}
ParameterBase& SamplerImage2D::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 24: return image;
      case 26: return inAttribute;
      case 19: return filter;
      case 89: return wrapMode1;
      case 90: return wrapMode2;
      case 27: return inTransform;
      case 48: return outTransform;
      default: return empty;
   }
}
const char ** SamplerImage2D::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "image",
      "inAttribute",
      "filter",
      "wrapMode1",
      "wrapMode2",
      "inTransform",
      "outTransform",
      nullptr
   };
   return paramnames;
}
size_t SamplerImage2D::paramCount() const {
   return 8;
}

SamplerImage3D::SamplerImage3D(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      const char *value = "attribute0";
      inAttribute.set(device, object, ANARI_STRING, value);
   }
   {
      const char *value = "nearest";
      filter.set(device, object, ANARI_STRING, value);
   }
   {
      const char *value = "clampToEdge";
      wrapMode1.set(device, object, ANARI_STRING, value);
   }
   {
      const char *value = "clampToEdge";
      wrapMode2.set(device, object, ANARI_STRING, value);
   }
   {
      const char *value = "clampToEdge";
      wrapMode3.set(device, object, ANARI_STRING, value);
   }
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
      inTransform.set(device, object, ANARI_FLOAT32_MAT4, value);
   }
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
      outTransform.set(device, object, ANARI_FLOAT32_MAT4, value);
   }
}
bool SamplerImage3D::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 24: //image
         return image.set(device, object, type, mem);
      case 26: //inAttribute
         return inAttribute.set(device, object, type, mem);
      case 19: //filter
         return filter.set(device, object, type, mem);
      case 89: //wrapMode1
         return wrapMode1.set(device, object, type, mem);
      case 90: //wrapMode2
         return wrapMode2.set(device, object, type, mem);
      case 91: //wrapMode3
         return wrapMode3.set(device, object, type, mem);
      case 27: //inTransform
         return inTransform.set(device, object, type, mem);
      case 48: //outTransform
         return outTransform.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void SamplerImage3D::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 24: //image
         image.unset(device, object);
         return;
      case 26: //inAttribute
         {
            const char *value = "attribute0";
            inAttribute.set(device, object, ANARI_STRING, value);
         }
         return;
      case 19: //filter
         {
            const char *value = "nearest";
            filter.set(device, object, ANARI_STRING, value);
         }
         return;
      case 89: //wrapMode1
         {
            const char *value = "clampToEdge";
            wrapMode1.set(device, object, ANARI_STRING, value);
         }
         return;
      case 90: //wrapMode2
         {
            const char *value = "clampToEdge";
            wrapMode2.set(device, object, ANARI_STRING, value);
         }
         return;
      case 91: //wrapMode3
         {
            const char *value = "clampToEdge";
            wrapMode3.set(device, object, ANARI_STRING, value);
         }
         return;
      case 27: //inTransform
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
            inTransform.set(device, object, ANARI_FLOAT32_MAT4, value);
         }
         return;
      case 48: //outTransform
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
            outTransform.set(device, object, ANARI_FLOAT32_MAT4, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& SamplerImage3D::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return image;
      case 2: return inAttribute;
      case 3: return filter;
      case 4: return wrapMode1;
      case 5: return wrapMode2;
      case 6: return wrapMode3;
      case 7: return inTransform;
      case 8: return outTransform;
      default: return empty;
   }
}
ParameterBase& SamplerImage3D::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 24: return image;
      case 26: return inAttribute;
      case 19: return filter;
      case 89: return wrapMode1;
      case 90: return wrapMode2;
      case 91: return wrapMode3;
      case 27: return inTransform;
      case 48: return outTransform;
      default: return empty;
   }
}
const char ** SamplerImage3D::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "image",
      "inAttribute",
      "filter",
      "wrapMode1",
      "wrapMode2",
      "wrapMode3",
      "inTransform",
      "outTransform",
      nullptr
   };
   return paramnames;
}
size_t SamplerImage3D::paramCount() const {
   return 9;
}

SamplerPrimitive::SamplerPrimitive(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      uint64_t value[] = {UINT64_C(0)};
      offset.set(device, object, ANARI_UINT64, value);
   }
}
bool SamplerPrimitive::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 4: //array
         return array.set(device, object, type, mem);
      case 43: //offset
         return offset.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void SamplerPrimitive::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 4: //array
         array.unset(device, object);
         return;
      case 43: //offset
         {
            uint64_t value[] = {UINT64_C(0)};
            offset.set(device, object, ANARI_UINT64, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& SamplerPrimitive::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return array;
      case 2: return offset;
      default: return empty;
   }
}
ParameterBase& SamplerPrimitive::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 4: return array;
      case 43: return offset;
      default: return empty;
   }
}
const char ** SamplerPrimitive::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "array",
      "offset",
      nullptr
   };
   return paramnames;
}
size_t SamplerPrimitive::paramCount() const {
   return 3;
}

SamplerTransform::SamplerTransform(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      const char *value = "attribute0";
      inAttribute.set(device, object, ANARI_STRING, value);
   }
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
      transform.set(device, object, ANARI_FLOAT32_MAT4, value);
   }
}
bool SamplerTransform::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 26: //inAttribute
         return inAttribute.set(device, object, type, mem);
      case 73: //transform
         return transform.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void SamplerTransform::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 26: //inAttribute
         {
            const char *value = "attribute0";
            inAttribute.set(device, object, ANARI_STRING, value);
         }
         return;
      case 73: //transform
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f, 0.000000f, 0.000000f, 0.000000f, 0.000000f, 1.000000f};
            transform.set(device, object, ANARI_FLOAT32_MAT4, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& SamplerTransform::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return inAttribute;
      case 2: return transform;
      default: return empty;
   }
}
ParameterBase& SamplerTransform::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 26: return inAttribute;
      case 73: return transform;
      default: return empty;
   }
}
const char ** SamplerTransform::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "inAttribute",
      "transform",
      nullptr
   };
   return paramnames;
}
size_t SamplerTransform::paramCount() const {
   return 3;
}

Spatial_FieldStructuredRegular::Spatial_FieldStructuredRegular(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {0.000000f, 0.000000f, 0.000000f};
      origin.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {1.000000f, 1.000000f, 1.000000f};
      spacing.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      const char *value = "nearest";
      filter.set(device, object, ANARI_STRING, value);
   }
}
bool Spatial_FieldStructuredRegular::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 11: //data
         return data.set(device, object, type, mem);
      case 47: //origin
         return origin.set(device, object, type, mem);
      case 67: //spacing
         return spacing.set(device, object, type, mem);
      case 19: //filter
         return filter.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void Spatial_FieldStructuredRegular::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 11: //data
         data.unset(device, object);
         return;
      case 47: //origin
         {
            float value[] = {0.000000f, 0.000000f, 0.000000f};
            origin.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 67: //spacing
         {
            float value[] = {1.000000f, 1.000000f, 1.000000f};
            spacing.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 19: //filter
         {
            const char *value = "nearest";
            filter.set(device, object, ANARI_STRING, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& Spatial_FieldStructuredRegular::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return data;
      case 2: return origin;
      case 3: return spacing;
      case 4: return filter;
      default: return empty;
   }
}
ParameterBase& Spatial_FieldStructuredRegular::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 11: return data;
      case 47: return origin;
      case 67: return spacing;
      case 19: return filter;
      default: return empty;
   }
}
const char ** Spatial_FieldStructuredRegular::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "data",
      "origin",
      "spacing",
      "filter",
      nullptr
   };
   return paramnames;
}
size_t Spatial_FieldStructuredRegular::paramCount() const {
   return 5;
}

VolumeScivis::VolumeScivis(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {0.000000f, 1.000000f};
      valueRange.set(device, object, ANARI_FLOAT32_BOX1, value);
   }
   {
      float value[] = {1.000000f};
      densityScale.set(device, object, ANARI_FLOAT32, value);
   }
}
bool VolumeScivis::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 18: //field
         return field.set(device, object, type, mem);
      case 75: //valueRange
         return valueRange.set(device, object, type, mem);
      case 9: //color
         return color.set(device, object, type, mem);
      case 10: //color.position
         return color_position.set(device, object, type, mem);
      case 44: //opacity
         return opacity.set(device, object, type, mem);
      case 45: //opacity.position
         return opacity_position.set(device, object, type, mem);
      case 12: //densityScale
         return densityScale.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void VolumeScivis::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 18: //field
         field.unset(device, object);
         return;
      case 75: //valueRange
         {
            float value[] = {0.000000f, 1.000000f};
            valueRange.set(device, object, ANARI_FLOAT32_BOX1, value);
         }
         return;
      case 9: //color
         color.unset(device, object);
         return;
      case 10: //color.position
         color_position.unset(device, object);
         return;
      case 44: //opacity
         opacity.unset(device, object);
         return;
      case 45: //opacity.position
         opacity_position.unset(device, object);
         return;
      case 12: //densityScale
         {
            float value[] = {1.000000f};
            densityScale.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& VolumeScivis::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return field;
      case 2: return valueRange;
      case 3: return color;
      case 4: return color_position;
      case 5: return opacity;
      case 6: return opacity_position;
      case 7: return densityScale;
      default: return empty;
   }
}
ParameterBase& VolumeScivis::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 18: return field;
      case 75: return valueRange;
      case 9: return color;
      case 10: return color_position;
      case 44: return opacity;
      case 45: return opacity_position;
      case 12: return densityScale;
      default: return empty;
   }
}
const char ** VolumeScivis::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "field",
      "valueRange",
      "color",
      "color.position",
      "opacity",
      "opacity.position",
      "densityScale",
      nullptr
   };
   return paramnames;
}
size_t VolumeScivis::paramCount() const {
   return 8;
}

LightRing::LightRing(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {1.000000f, 1.000000f, 1.000000f};
      color.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, 0.000000f};
      position.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, -1.000000f};
      direction.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {3.141593f};
      openingAngle.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {0.100000f};
      falloffAngle.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      intensity.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      power.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {0.000000f};
      radius.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {0.000000f};
      innerRadius.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      radiance.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f};
      c0.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      int32_t value[] = {INT32_C(1)};
      visible.set(device, object, ANARI_BOOL, value);
   }
}
bool LightRing::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 9: //color
         return color.set(device, object, type, mem);
      case 49: //position
         return position.set(device, object, type, mem);
      case 14: //direction
         return direction.set(device, object, type, mem);
      case 46: //openingAngle
         return openingAngle.set(device, object, type, mem);
      case 17: //falloffAngle
         return falloffAngle.set(device, object, type, mem);
      case 30: //intensity
         return intensity.set(device, object, type, mem);
      case 50: //power
         return power.set(device, object, type, mem);
      case 60: //radius
         return radius.set(device, object, type, mem);
      case 28: //innerRadius
         return innerRadius.set(device, object, type, mem);
      case 59: //radiance
         return radiance.set(device, object, type, mem);
      case 31: //intensityDistribution
         return intensityDistribution.set(device, object, type, mem);
      case 6: //c0
         return c0.set(device, object, type, mem);
      case 86: //visible
         return visible.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void LightRing::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 9: //color
         {
            float value[] = {1.000000f, 1.000000f, 1.000000f};
            color.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 49: //position
         {
            float value[] = {0.000000f, 0.000000f, 0.000000f};
            position.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 14: //direction
         {
            float value[] = {0.000000f, 0.000000f, -1.000000f};
            direction.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 46: //openingAngle
         {
            float value[] = {3.141593f};
            openingAngle.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 17: //falloffAngle
         {
            float value[] = {0.100000f};
            falloffAngle.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 30: //intensity
         {
            float value[] = {1.000000f};
            intensity.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 50: //power
         {
            float value[] = {1.000000f};
            power.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 60: //radius
         {
            float value[] = {0.000000f};
            radius.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 28: //innerRadius
         {
            float value[] = {0.000000f};
            innerRadius.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 59: //radiance
         {
            float value[] = {1.000000f};
            radiance.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 31: //intensityDistribution
         intensityDistribution.unset(device, object);
         return;
      case 6: //c0
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f};
            c0.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 86: //visible
         {
            int32_t value[] = {INT32_C(1)};
            visible.set(device, object, ANARI_BOOL, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& LightRing::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return color;
      case 2: return position;
      case 3: return direction;
      case 4: return openingAngle;
      case 5: return falloffAngle;
      case 6: return intensity;
      case 7: return power;
      case 8: return radius;
      case 9: return innerRadius;
      case 10: return radiance;
      case 11: return intensityDistribution;
      case 12: return c0;
      case 13: return visible;
      default: return empty;
   }
}
ParameterBase& LightRing::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 9: return color;
      case 49: return position;
      case 14: return direction;
      case 46: return openingAngle;
      case 17: return falloffAngle;
      case 30: return intensity;
      case 50: return power;
      case 60: return radius;
      case 28: return innerRadius;
      case 59: return radiance;
      case 31: return intensityDistribution;
      case 6: return c0;
      case 86: return visible;
      default: return empty;
   }
}
const char ** LightRing::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "color",
      "position",
      "direction",
      "openingAngle",
      "falloffAngle",
      "intensity",
      "power",
      "radius",
      "innerRadius",
      "radiance",
      "intensityDistribution",
      "c0",
      "visible",
      nullptr
   };
   return paramnames;
}
size_t LightRing::paramCount() const {
   return 14;
}

LightQuad::LightQuad(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {1.000000f, 1.000000f, 1.000000f};
      color.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, 0.000000f};
      position.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {1.000000f, 0.000000f, 0.000000f};
      edge1.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 1.000000f, 0.000000f};
      edge2.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {1.000000f};
      intensity.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      power.set(device, object, ANARI_FLOAT32, value);
   }
   {
      float value[] = {1.000000f};
      radiance.set(device, object, ANARI_FLOAT32, value);
   }
   {
      const char *value = "front";
      side.set(device, object, ANARI_STRING, value);
   }
   {
      int32_t value[] = {INT32_C(1)};
      visible.set(device, object, ANARI_BOOL, value);
   }
}
bool LightQuad::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 9: //color
         return color.set(device, object, type, mem);
      case 49: //position
         return position.set(device, object, type, mem);
      case 15: //edge1
         return edge1.set(device, object, type, mem);
      case 16: //edge2
         return edge2.set(device, object, type, mem);
      case 30: //intensity
         return intensity.set(device, object, type, mem);
      case 50: //power
         return power.set(device, object, type, mem);
      case 59: //radiance
         return radiance.set(device, object, type, mem);
      case 65: //side
         return side.set(device, object, type, mem);
      case 31: //intensityDistribution
         return intensityDistribution.set(device, object, type, mem);
      case 86: //visible
         return visible.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void LightQuad::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 9: //color
         {
            float value[] = {1.000000f, 1.000000f, 1.000000f};
            color.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 49: //position
         {
            float value[] = {0.000000f, 0.000000f, 0.000000f};
            position.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 15: //edge1
         {
            float value[] = {1.000000f, 0.000000f, 0.000000f};
            edge1.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 16: //edge2
         {
            float value[] = {0.000000f, 1.000000f, 0.000000f};
            edge2.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 30: //intensity
         {
            float value[] = {1.000000f};
            intensity.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 50: //power
         {
            float value[] = {1.000000f};
            power.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 59: //radiance
         {
            float value[] = {1.000000f};
            radiance.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 65: //side
         {
            const char *value = "front";
            side.set(device, object, ANARI_STRING, value);
         }
         return;
      case 31: //intensityDistribution
         intensityDistribution.unset(device, object);
         return;
      case 86: //visible
         {
            int32_t value[] = {INT32_C(1)};
            visible.set(device, object, ANARI_BOOL, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& LightQuad::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return color;
      case 2: return position;
      case 3: return edge1;
      case 4: return edge2;
      case 5: return intensity;
      case 6: return power;
      case 7: return radiance;
      case 8: return side;
      case 9: return intensityDistribution;
      case 10: return visible;
      default: return empty;
   }
}
ParameterBase& LightQuad::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 9: return color;
      case 49: return position;
      case 15: return edge1;
      case 16: return edge2;
      case 30: return intensity;
      case 50: return power;
      case 59: return radiance;
      case 65: return side;
      case 31: return intensityDistribution;
      case 86: return visible;
      default: return empty;
   }
}
const char ** LightQuad::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "color",
      "position",
      "edge1",
      "edge2",
      "intensity",
      "power",
      "radiance",
      "side",
      "intensityDistribution",
      "visible",
      nullptr
   };
   return paramnames;
}
size_t LightQuad::paramCount() const {
   return 11;
}

LightHdri::LightHdri(ANARIDevice device, ANARIObject o) : device(device), object(o) {
   {
      float value[] = {1.000000f, 1.000000f, 1.000000f};
      color.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      float value[] = {0.000000f, 0.000000f, 1.000000f};
      up.set(device, object, ANARI_FLOAT32_VEC3, value);
   }
   {
      const char *value = "equirectangular";
      layout.set(device, object, ANARI_STRING, value);
   }
   {
      float value[] = {1.000000f};
      scale.set(device, object, ANARI_FLOAT32, value);
   }
   {
      int32_t value[] = {INT32_C(1)};
      visible.set(device, object, ANARI_BOOL, value);
   }
}
bool LightHdri::set(const char *paramname, ANARIDataType type, const void *mem) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         return name.set(device, object, type, mem);
      case 9: //color
         return color.set(device, object, type, mem);
      case 74: //up
         return up.set(device, object, type, mem);
      case 59: //radiance
         return radiance.set(device, object, type, mem);
      case 34: //layout
         return layout.set(device, object, type, mem);
      case 63: //scale
         return scale.set(device, object, type, mem);
      case 86: //visible
         return visible.set(device, object, type, mem);
      default: // unknown param
         //unknown parameter
         return false;
   }
}
void LightHdri::unset(const char *paramname) {
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: //name
         name.unset(device, object);
         return;
      case 9: //color
         {
            float value[] = {1.000000f, 1.000000f, 1.000000f};
            color.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 74: //up
         {
            float value[] = {0.000000f, 0.000000f, 1.000000f};
            up.set(device, object, ANARI_FLOAT32_VEC3, value);
         }
         return;
      case 59: //radiance
         radiance.unset(device, object);
         return;
      case 34: //layout
         {
            const char *value = "equirectangular";
            layout.set(device, object, ANARI_STRING, value);
         }
         return;
      case 63: //scale
         {
            float value[] = {1.000000f};
            scale.set(device, object, ANARI_FLOAT32, value);
         }
         return;
      case 86: //visible
         {
            int32_t value[] = {INT32_C(1)};
            visible.set(device, object, ANARI_BOOL, value);
         }
         return;
      default: // unknown param
         //unknown parameter
         return;
   }
}
ParameterBase& LightHdri::operator[](size_t idx) {
   static EmptyParameter empty;
   switch(idx) {
      case 0: return name;
      case 1: return color;
      case 2: return up;
      case 3: return radiance;
      case 4: return layout;
      case 5: return scale;
      case 6: return visible;
      default: return empty;
   }
}
ParameterBase& LightHdri::operator[](const char *paramname) {
   static EmptyParameter empty;
   int idx = param_hash(paramname);
   switch(idx) {
      case 41: return name;
      case 9: return color;
      case 74: return up;
      case 59: return radiance;
      case 34: return layout;
      case 63: return scale;
      case 86: return visible;
      default: return empty;
   }
}
const char ** LightHdri::paramNames() const {
   static const char *paramnames[] = {
      "name",
      "color",
      "up",
      "radiance",
      "layout",
      "scale",
      "visible",
      nullptr
   };
   return paramnames;
}
size_t LightHdri::paramCount() const {
   return 7;
}

} //namespace anari_sdk
} //namespace tree
