// Copyright 2021 The Khronos Group
// SPDX-License-Identifier: Apache-2.0

// This file was generated by generate_queries.py
// Don't make changes to this directly

#include <anari/anari.h>
namespace anari {
namespace tree {
static int subtype_hash(const char *str) {
   static const uint32_t table[] = {0x7a6f0012u,0x6a65002bu,0x0u,0x0u,0x0u,0x65640040u,0x6e6d0044u,0x0u,0x0u,0x0u,0x62610051u,0x0u,0x736d0056u,0x73650075u,0x76750099u,0x6a69009du,0x756300a1u,0x737200d6u,0x6f6e001du,0x0u,0x0u,0x0u,0x0u,0x0u,0x73720020u,0x0u,0x0u,0x0u,0x6d6c0024u,0x6665001eu,0x100001fu,0x80000000u,0x77760021u,0x66650022u,0x1000023u,0x80000001u,0x6a690025u,0x6f6e0026u,0x65640027u,0x66650028u,0x73720029u,0x100002au,0x80000002u,0x67660030u,0x0u,0x0u,0x0u,0x73720036u,0x62610031u,0x76750032u,0x6d6c0033u,0x75740034u,0x1000035u,0x80000003u,0x66650037u,0x64630038u,0x75740039u,0x6a69003au,0x706f003bu,0x6f6e003cu,0x6261003du,0x6d6c003eu,0x100003fu,0x80000004u,0x73720041u,0x6a690042u,0x1000043u,0x80000005u,0x62610045u,0x68670046u,0x66650047u,0x34310048u,0x4544004bu,0x4544004du,0x4544004fu,0x100004cu,0x80000006u,0x100004eu,0x80000007u,0x1000050u,0x80000008u,0x75740052u,0x75740053u,0x66650054u,0x1000055u,0x80000009u,0x6f6e005cu,0x0u,0x0u,0x0u,0x0u,0x7574006au,0x6a69005du,0x6564005eu,0x6a69005fu,0x73720060u,0x66650061u,0x64630062u,0x75740063u,0x6a690064u,0x706f0065u,0x6f6e0066u,0x62610067u,0x6d6c0068u,0x1000069u,0x8000000au,0x6968006bu,0x706f006cu,0x6867006du,0x7372006eu,0x6261006fu,0x71700070u,0x69680071u,0x6a690072u,0x64630073u,0x1000074u,0x8000000bu,0x73720083u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x6a69008du,0x0u,0x0u,0x6a690091u,0x74730084u,0x71700085u,0x66650086u,0x64630087u,0x75740088u,0x6a690089u,0x7776008au,0x6665008bu,0x100008cu,0x8000000cu,0x6f6e008eu,0x7574008fu,0x1000090u,0x8000000du,0x6e6d0092u,0x6a690093u,0x75740094u,0x6a690095u,0x77760096u,0x66650097u,0x1000098u,0x8000000eu,0x6261009au,0x6564009bu,0x100009cu,0x8000000fu,0x6f6e009eu,0x6867009fu,0x10000a0u,0x80000010u,0x6a6900b3u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x706800b8u,0x0u,0x0u,0x0u,0x737200c6u,0x777600b4u,0x6a6900b5u,0x747300b6u,0x10000b7u,0x80000011u,0x666500c0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x757400c4u,0x737200c1u,0x666500c2u,0x10000c3u,0x80000012u,0x10000c5u,0x80000013u,0x767500c7u,0x646300c8u,0x757400c9u,0x767500cau,0x737200cbu,0x666500ccu,0x656400cdu,0x535200ceu,0x666500cfu,0x686700d0u,0x767500d1u,0x6d6c00d2u,0x626100d3u,0x737200d4u,0x10000d5u,0x80000014u,0x6a6100d7u,0x6f6e00e0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x626100fcu,0x747300e1u,0x716600e2u,0x706f00edu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x626100f1u,0x737200eeu,0x6e6d00efu,0x10000f0u,0x80000015u,0x737200f2u,0x666500f3u,0x6f6e00f4u,0x757400f5u,0x4e4d00f6u,0x626100f7u,0x757400f8u,0x757400f9u,0x666500fau,0x10000fbu,0x80000016u,0x6f6e00fdu,0x686700feu,0x6d6c00ffu,0x66650100u,0x1000101u,0x80000017u};
   uint32_t cur = 0x75630000u;
   for(int i = 0;cur!=0;++i) {
      uint32_t idx = cur&0xFFFFu;
      uint32_t low = (cur>>16u)&0xFFu;
      uint32_t high = (cur>>24u)&0xFFu;
      uint32_t c = str[i];
      if(c>=low && c<high) {
         cur = table[idx+c-low];
      } else {
         break;
      }
      if(cur&0x80000000u) {
         return cur&0xFFFFu;
      }
      if(str[i]==0) {
         break;
      }
   }
   return -1;
}
const char ** query_object_types(ANARIDataType type) {
   switch(type) {
      case ANARI_RENDERER:
      {
         static const char *ANARI_RENDERER_subtypes[] = {"default", 0};
         return ANARI_RENDERER_subtypes;
      }
      case ANARI_CAMERA:
      {
         static const char *ANARI_CAMERA_subtypes[] = {"omnidirectional", "orthographic", "perspective", 0};
         return ANARI_CAMERA_subtypes;
      }
      case ANARI_GEOMETRY:
      {
         static const char *ANARI_GEOMETRY_subtypes[] = {"cone", "curve", "cylinder", "quad", "sphere", "triangle", 0};
         return ANARI_GEOMETRY_subtypes;
      }
      case ANARI_LIGHT:
      {
         static const char *ANARI_LIGHT_subtypes[] = {"directional", "point", "spot", "ring", "quad", "hdri", 0};
         return ANARI_LIGHT_subtypes;
      }
      case ANARI_MATERIAL:
      {
         static const char *ANARI_MATERIAL_subtypes[] = {"matte", "transparentMatte", 0};
         return ANARI_MATERIAL_subtypes;
      }
      case ANARI_SAMPLER:
      {
         static const char *ANARI_SAMPLER_subtypes[] = {"image1D", "image2D", "image3D", "primitive", "transform", 0};
         return ANARI_SAMPLER_subtypes;
      }
      case ANARI_SPATIAL_FIELD:
      {
         static const char *ANARI_SPATIAL_FIELD_subtypes[] = {"structuredRegular", 0};
         return ANARI_SPATIAL_FIELD_subtypes;
      }
      case ANARI_VOLUME:
      {
         static const char *ANARI_VOLUME_subtypes[] = {"scivis", 0};
         return ANARI_VOLUME_subtypes;
      }
      default:
      {
         static const char *none_subtypes[] = {0};
         return none_subtypes;
      }
   }
}
static const ANARIParameter * ANARI_CAMERA_params(const char *subtype) {
   switch(subtype_hash(subtype)) {
      case 10:
      {
         static const ANARIParameter omnidirectional_params[] = {{"name", ANARI_STRING}, {"position", ANARI_FLOAT32_VEC3}, {"direction", ANARI_FLOAT32_VEC3}, {"up", ANARI_FLOAT32_VEC3}, {"transform", ANARI_FLOAT32_MAT3x4}, {"imageRegion", ANARI_FLOAT32_BOX2}, {"apertureRadius", ANARI_FLOAT32}, {"focusDistance", ANARI_FLOAT32}, {"stereoMode", ANARI_STRING}, {"interpupillaryDistance", ANARI_FLOAT32}, {"layout", ANARI_STRING}, {"motion.transform", ANARI_ARRAY1D}, {"motion.scale", ANARI_ARRAY1D}, {"motion.rotation", ANARI_ARRAY1D}, {"motion.translation", ANARI_ARRAY1D}, {"time", ANARI_FLOAT32_BOX1}, {"shutter", ANARI_FLOAT32_BOX1}, {0, ANARI_UNKNOWN}};
         return omnidirectional_params;
      }
      case 11:
      {
         static const ANARIParameter orthographic_params[] = {{"name", ANARI_STRING}, {"position", ANARI_FLOAT32_VEC3}, {"direction", ANARI_FLOAT32_VEC3}, {"up", ANARI_FLOAT32_VEC3}, {"transform", ANARI_FLOAT32_MAT3x4}, {"imageRegion", ANARI_FLOAT32_BOX2}, {"apertureRadius", ANARI_FLOAT32}, {"focusDistance", ANARI_FLOAT32}, {"stereoMode", ANARI_STRING}, {"interpupillaryDistance", ANARI_FLOAT32}, {"aspect", ANARI_FLOAT32}, {"motion.transform", ANARI_ARRAY1D}, {"motion.scale", ANARI_ARRAY1D}, {"motion.rotation", ANARI_ARRAY1D}, {"motion.translation", ANARI_ARRAY1D}, {"time", ANARI_FLOAT32_BOX1}, {"shutter", ANARI_FLOAT32_BOX1}, {0, ANARI_UNKNOWN}};
         return orthographic_params;
      }
      case 12:
      {
         static const ANARIParameter perspective_params[] = {{"name", ANARI_STRING}, {"position", ANARI_FLOAT32_VEC3}, {"direction", ANARI_FLOAT32_VEC3}, {"up", ANARI_FLOAT32_VEC3}, {"transform", ANARI_FLOAT32_MAT3x4}, {"imageRegion", ANARI_FLOAT32_BOX2}, {"apertureRadius", ANARI_FLOAT32}, {"focusDistance", ANARI_FLOAT32}, {"stereoMode", ANARI_STRING}, {"interpupillaryDistance", ANARI_FLOAT32}, {"fovy", ANARI_FLOAT32}, {"aspect", ANARI_FLOAT32}, {"motion.transform", ANARI_ARRAY1D}, {"motion.scale", ANARI_ARRAY1D}, {"motion.rotation", ANARI_ARRAY1D}, {"motion.translation", ANARI_ARRAY1D}, {"time", ANARI_FLOAT32_BOX1}, {"shutter", ANARI_FLOAT32_BOX1}, {0, ANARI_UNKNOWN}};
         return perspective_params;
      }
      default:
      {
         static const ANARIParameter none[] = {{0, ANARI_UNKNOWN}};
         return none;
      }
   }
}
static const ANARIParameter * ANARI_GEOMETRY_params(const char *subtype) {
   switch(subtype_hash(subtype)) {
      case 0:
      {
         static const ANARIParameter cone_params[] = {{"name", ANARI_STRING}, {"primitive.color", ANARI_ARRAY1D}, {"primitive.attribute0", ANARI_ARRAY1D}, {"primitive.attribute1", ANARI_ARRAY1D}, {"primitive.attribute2", ANARI_ARRAY1D}, {"primitive.attribute3", ANARI_ARRAY1D}, {"primitive.id", ANARI_ARRAY1D}, {"vertex.position", ANARI_ARRAY1D}, {"vertex.radius", ANARI_ARRAY1D}, {"vertex.cap", ANARI_ARRAY1D}, {"vertex.color", ANARI_ARRAY1D}, {"vertex.attribute0", ANARI_ARRAY1D}, {"vertex.attribute1", ANARI_ARRAY1D}, {"vertex.attribute2", ANARI_ARRAY1D}, {"vertex.attribute3", ANARI_ARRAY1D}, {"primitive.index", ANARI_ARRAY1D}, {"caps", ANARI_STRING}, {0, ANARI_UNKNOWN}};
         return cone_params;
      }
      case 1:
      {
         static const ANARIParameter curve_params[] = {{"name", ANARI_STRING}, {"primitive.color", ANARI_ARRAY1D}, {"primitive.attribute0", ANARI_ARRAY1D}, {"primitive.attribute1", ANARI_ARRAY1D}, {"primitive.attribute2", ANARI_ARRAY1D}, {"primitive.attribute3", ANARI_ARRAY1D}, {"primitive.id", ANARI_ARRAY1D}, {"vertex.position", ANARI_ARRAY1D}, {"vertex.radius", ANARI_ARRAY1D}, {"vertex.color", ANARI_ARRAY1D}, {"vertex.attribute0", ANARI_ARRAY1D}, {"vertex.attribute1", ANARI_ARRAY1D}, {"vertex.attribute2", ANARI_ARRAY1D}, {"vertex.attribute3", ANARI_ARRAY1D}, {"primitive.index", ANARI_ARRAY1D}, {"radius", ANARI_FLOAT32}, {0, ANARI_UNKNOWN}};
         return curve_params;
      }
      case 2:
      {
         static const ANARIParameter cylinder_params[] = {{"name", ANARI_STRING}, {"primitive.color", ANARI_ARRAY1D}, {"primitive.attribute0", ANARI_ARRAY1D}, {"primitive.attribute1", ANARI_ARRAY1D}, {"primitive.attribute2", ANARI_ARRAY1D}, {"primitive.attribute3", ANARI_ARRAY1D}, {"primitive.id", ANARI_ARRAY1D}, {"vertex.position", ANARI_ARRAY1D}, {"vertex.cap", ANARI_ARRAY1D}, {"vertex.color", ANARI_ARRAY1D}, {"vertex.attribute0", ANARI_ARRAY1D}, {"vertex.attribute1", ANARI_ARRAY1D}, {"vertex.attribute2", ANARI_ARRAY1D}, {"vertex.attribute3", ANARI_ARRAY1D}, {"primitive.index", ANARI_ARRAY1D}, {"primitive.radius", ANARI_ARRAY1D}, {"radius", ANARI_FLOAT32}, {"caps", ANARI_STRING}, {0, ANARI_UNKNOWN}};
         return cylinder_params;
      }
      case 15:
      {
         static const ANARIParameter quad_params[] = {{"name", ANARI_STRING}, {"primitive.color", ANARI_ARRAY1D}, {"primitive.attribute0", ANARI_ARRAY1D}, {"primitive.attribute1", ANARI_ARRAY1D}, {"primitive.attribute2", ANARI_ARRAY1D}, {"primitive.attribute3", ANARI_ARRAY1D}, {"primitive.id", ANARI_ARRAY1D}, {"vertex.position", ANARI_ARRAY1D}, {"vertex.normal", ANARI_ARRAY1D}, {"vertex.color", ANARI_ARRAY1D}, {"vertex.attribute0", ANARI_ARRAY1D}, {"vertex.attribute1", ANARI_ARRAY1D}, {"vertex.attribute2", ANARI_ARRAY1D}, {"vertex.attribute3", ANARI_ARRAY1D}, {"primitive.index", ANARI_ARRAY1D}, {0, ANARI_UNKNOWN}};
         return quad_params;
      }
      case 18:
      {
         static const ANARIParameter sphere_params[] = {{"name", ANARI_STRING}, {"primitive.color", ANARI_ARRAY1D}, {"primitive.attribute0", ANARI_ARRAY1D}, {"primitive.attribute1", ANARI_ARRAY1D}, {"primitive.attribute2", ANARI_ARRAY1D}, {"primitive.attribute3", ANARI_ARRAY1D}, {"primitive.id", ANARI_ARRAY1D}, {"vertex.position", ANARI_ARRAY1D}, {"vertex.radius", ANARI_ARRAY1D}, {"vertex.color", ANARI_ARRAY1D}, {"vertex.attribute0", ANARI_ARRAY1D}, {"vertex.attribute1", ANARI_ARRAY1D}, {"vertex.attribute2", ANARI_ARRAY1D}, {"vertex.attribute3", ANARI_ARRAY1D}, {"primitive.index", ANARI_ARRAY1D}, {"radius", ANARI_FLOAT32}, {0, ANARI_UNKNOWN}};
         return sphere_params;
      }
      case 23:
      {
         static const ANARIParameter triangle_params[] = {{"name", ANARI_STRING}, {"primitive.color", ANARI_ARRAY1D}, {"primitive.attribute0", ANARI_ARRAY1D}, {"primitive.attribute1", ANARI_ARRAY1D}, {"primitive.attribute2", ANARI_ARRAY1D}, {"primitive.attribute3", ANARI_ARRAY1D}, {"primitive.id", ANARI_ARRAY1D}, {"vertex.position", ANARI_ARRAY1D}, {"vertex.normal", ANARI_ARRAY1D}, {"vertex.color", ANARI_ARRAY1D}, {"vertex.attribute0", ANARI_ARRAY1D}, {"vertex.attribute1", ANARI_ARRAY1D}, {"vertex.attribute2", ANARI_ARRAY1D}, {"vertex.attribute3", ANARI_ARRAY1D}, {"primitive.index", ANARI_ARRAY1D}, {0, ANARI_UNKNOWN}};
         return triangle_params;
      }
      default:
      {
         static const ANARIParameter none[] = {{0, ANARI_UNKNOWN}};
         return none;
      }
   }
}
static const ANARIParameter * ANARI_LIGHT_params(const char *subtype) {
   switch(subtype_hash(subtype)) {
      case 4:
      {
         static const ANARIParameter directional_params[] = {{"name", ANARI_STRING}, {"color", ANARI_FLOAT32_VEC3}, {"irridance", ANARI_FLOAT32}, {"direction", ANARI_FLOAT32_VEC3}, {"angularDiameter", ANARI_FLOAT32}, {"radiance", ANARI_FLOAT32}, {"visible", ANARI_BOOL}, {0, ANARI_UNKNOWN}};
         return directional_params;
      }
      case 13:
      {
         static const ANARIParameter point_params[] = {{"name", ANARI_STRING}, {"color", ANARI_FLOAT32_VEC3}, {"position", ANARI_FLOAT32_VEC3}, {"intensity", ANARI_FLOAT32}, {"power", ANARI_FLOAT32}, {"radius", ANARI_FLOAT32}, {"radiance", ANARI_FLOAT32}, {"visible", ANARI_BOOL}, {0, ANARI_UNKNOWN}};
         return point_params;
      }
      case 19:
      {
         static const ANARIParameter spot_params[] = {{"name", ANARI_STRING}, {"color", ANARI_FLOAT32_VEC3}, {"position", ANARI_FLOAT32_VEC3}, {"direction", ANARI_FLOAT32_VEC3}, {"openingAngle", ANARI_FLOAT32}, {"falloffAngle", ANARI_FLOAT32}, {"intensity", ANARI_FLOAT32}, {"power", ANARI_FLOAT32}, {0, ANARI_UNKNOWN}};
         return spot_params;
      }
      case 16:
      {
         static const ANARIParameter ring_params[] = {{"name", ANARI_STRING}, {"color", ANARI_FLOAT32_VEC3}, {"position", ANARI_FLOAT32_VEC3}, {"direction", ANARI_FLOAT32_VEC3}, {"openingAngle", ANARI_FLOAT32}, {"falloffAngle", ANARI_FLOAT32}, {"intensity", ANARI_FLOAT32}, {"power", ANARI_FLOAT32}, {"radius", ANARI_FLOAT32}, {"innerRadius", ANARI_FLOAT32}, {"radiance", ANARI_FLOAT32}, {"intensityDistribution", ANARI_ARRAY1D}, {"intensityDistribution", ANARI_ARRAY2D}, {"c0", ANARI_FLOAT32_VEC3}, {"visible", ANARI_BOOL}, {0, ANARI_UNKNOWN}};
         return ring_params;
      }
      case 15:
      {
         static const ANARIParameter quad_params[] = {{"name", ANARI_STRING}, {"color", ANARI_FLOAT32_VEC3}, {"position", ANARI_FLOAT32_VEC3}, {"edge1", ANARI_FLOAT32_VEC3}, {"edge2", ANARI_FLOAT32_VEC3}, {"intensity", ANARI_FLOAT32}, {"power", ANARI_FLOAT32}, {"radiance", ANARI_FLOAT32}, {"side", ANARI_STRING}, {"intensityDistribution", ANARI_ARRAY1D}, {"intensityDistribution", ANARI_ARRAY2D}, {"visible", ANARI_BOOL}, {0, ANARI_UNKNOWN}};
         return quad_params;
      }
      case 5:
      {
         static const ANARIParameter hdri_params[] = {{"name", ANARI_STRING}, {"color", ANARI_FLOAT32_VEC3}, {"up", ANARI_FLOAT32_VEC3}, {"radiance", ANARI_ARRAY2D}, {"layout", ANARI_STRING}, {"scale", ANARI_FLOAT32}, {"visible", ANARI_BOOL}, {0, ANARI_UNKNOWN}};
         return hdri_params;
      }
      default:
      {
         static const ANARIParameter none[] = {{0, ANARI_UNKNOWN}};
         return none;
      }
   }
}
static const ANARIParameter * ANARI_MATERIAL_params(const char *subtype) {
   switch(subtype_hash(subtype)) {
      case 9:
      {
         static const ANARIParameter matte_params[] = {{"name", ANARI_STRING}, {"color", ANARI_FLOAT32_VEC3}, {"color", ANARI_SAMPLER}, {"color", ANARI_STRING}, {0, ANARI_UNKNOWN}};
         return matte_params;
      }
      case 22:
      {
         static const ANARIParameter transparentMatte_params[] = {{"name", ANARI_STRING}, {"color", ANARI_FLOAT32_VEC3}, {"color", ANARI_SAMPLER}, {"color", ANARI_STRING}, {"opacity", ANARI_FLOAT32}, {"opacity", ANARI_SAMPLER}, {"opacity", ANARI_STRING}, {0, ANARI_UNKNOWN}};
         return transparentMatte_params;
      }
      default:
      {
         static const ANARIParameter none[] = {{0, ANARI_UNKNOWN}};
         return none;
      }
   }
}
static const ANARIParameter * ANARI_RENDERER_params(const char *subtype) {
   switch(subtype_hash(subtype)) {
      case 3:
      {
         static const ANARIParameter default_params[] = {{"name", ANARI_STRING}, {0, ANARI_UNKNOWN}};
         return default_params;
      }
      default:
      {
         static const ANARIParameter none[] = {{0, ANARI_UNKNOWN}};
         return none;
      }
   }
}
static const ANARIParameter * ANARI_SAMPLER_params(const char *subtype) {
   switch(subtype_hash(subtype)) {
      case 6:
      {
         static const ANARIParameter image1D_params[] = {{"name", ANARI_STRING}, {"image", ANARI_ARRAY1D}, {"inAttribute", ANARI_STRING}, {"filter", ANARI_STRING}, {"wrapMode1", ANARI_STRING}, {"inTransform", ANARI_FLOAT32_MAT4}, {"outTransform", ANARI_FLOAT32_MAT4}, {0, ANARI_UNKNOWN}};
         return image1D_params;
      }
      case 7:
      {
         static const ANARIParameter image2D_params[] = {{"name", ANARI_STRING}, {"image", ANARI_ARRAY2D}, {"inAttribute", ANARI_STRING}, {"filter", ANARI_STRING}, {"wrapMode1", ANARI_STRING}, {"wrapMode2", ANARI_STRING}, {"inTransform", ANARI_FLOAT32_MAT4}, {"outTransform", ANARI_FLOAT32_MAT4}, {0, ANARI_UNKNOWN}};
         return image2D_params;
      }
      case 8:
      {
         static const ANARIParameter image3D_params[] = {{"name", ANARI_STRING}, {"image", ANARI_ARRAY3D}, {"inAttribute", ANARI_STRING}, {"filter", ANARI_STRING}, {"wrapMode1", ANARI_STRING}, {"wrapMode2", ANARI_STRING}, {"wrapMode3", ANARI_STRING}, {"inTransform", ANARI_FLOAT32_MAT4}, {"outTransform", ANARI_FLOAT32_MAT4}, {0, ANARI_UNKNOWN}};
         return image3D_params;
      }
      case 14:
      {
         static const ANARIParameter primitive_params[] = {{"name", ANARI_STRING}, {"array", ANARI_ARRAY1D}, {0, ANARI_UNKNOWN}};
         return primitive_params;
      }
      case 21:
      {
         static const ANARIParameter transform_params[] = {{"name", ANARI_STRING}, {"inAttribute", ANARI_STRING}, {"transform", ANARI_FLOAT32_MAT4}, {0, ANARI_UNKNOWN}};
         return transform_params;
      }
      default:
      {
         static const ANARIParameter none[] = {{0, ANARI_UNKNOWN}};
         return none;
      }
   }
}
static const ANARIParameter * ANARI_SPATIAL_FIELD_params(const char *subtype) {
   switch(subtype_hash(subtype)) {
      case 20:
      {
         static const ANARIParameter structuredRegular_params[] = {{"name", ANARI_STRING}, {"data", ANARI_ARRAY3D}, {"origin", ANARI_FLOAT32_VEC3}, {"spacing", ANARI_FLOAT32_VEC3}, {"filter", ANARI_STRING}, {0, ANARI_UNKNOWN}};
         return structuredRegular_params;
      }
      default:
      {
         static const ANARIParameter none[] = {{0, ANARI_UNKNOWN}};
         return none;
      }
   }
}
static const ANARIParameter * ANARI_VOLUME_params(const char *subtype) {
   switch(subtype_hash(subtype)) {
      case 17:
      {
         static const ANARIParameter scivis_params[] = {{"name", ANARI_STRING}, {"field", ANARI_SPATIAL_FIELD}, {"valueRange", ANARI_FLOAT32_BOX1}, {"color", ANARI_ARRAY1D}, {"color.position", ANARI_ARRAY1D}, {"opacity", ANARI_ARRAY1D}, {"opacity.position", ANARI_ARRAY1D}, {"densityScale", ANARI_FLOAT32}, {0, ANARI_UNKNOWN}};
         return scivis_params;
      }
      default:
      {
         static const ANARIParameter none[] = {{0, ANARI_UNKNOWN}};
         return none;
      }
   }
}
const ANARIParameter * query_params(ANARIDataType type, const char *subtype) {
   switch(type) {
      case ANARI_CAMERA:
         return ANARI_CAMERA_params(subtype);
      case ANARI_GEOMETRY:
         return ANARI_GEOMETRY_params(subtype);
      case ANARI_LIGHT:
         return ANARI_LIGHT_params(subtype);
      case ANARI_MATERIAL:
         return ANARI_MATERIAL_params(subtype);
      case ANARI_RENDERER:
         return ANARI_RENDERER_params(subtype);
      case ANARI_SAMPLER:
         return ANARI_SAMPLER_params(subtype);
      case ANARI_SPATIAL_FIELD:
         return ANARI_SPATIAL_FIELD_params(subtype);
      case ANARI_VOLUME:
         return ANARI_VOLUME_params(subtype);
      case ANARI_DEVICE:
      {
         static const ANARIParameter ANARI_DEVICE_params[] = {{"name", ANARI_STRING}, {"statusCallback", ANARI_STATUS_CALLBACK}, {"statusCallbackUserData", ANARI_VOID_POINTER}, {0, ANARI_UNKNOWN}};
         return ANARI_DEVICE_params;
      }
      case ANARI_ARRAY1D:
      {
         static const ANARIParameter ANARI_ARRAY1D_params[] = {{"name", ANARI_STRING}, {"region", ANARI_UINT64_BOX1}, {0, ANARI_UNKNOWN}};
         return ANARI_ARRAY1D_params;
      }
      case ANARI_ARRAY2D:
      {
         static const ANARIParameter ANARI_ARRAY2D_params[] = {{"name", ANARI_STRING}, {0, ANARI_UNKNOWN}};
         return ANARI_ARRAY2D_params;
      }
      case ANARI_ARRAY3D:
      {
         static const ANARIParameter ANARI_ARRAY3D_params[] = {{"name", ANARI_STRING}, {0, ANARI_UNKNOWN}};
         return ANARI_ARRAY3D_params;
      }
      case ANARI_FRAME:
      {
         static const ANARIParameter ANARI_FRAME_params[] = {{"name", ANARI_STRING}, {"world", ANARI_WORLD}, {"renderer", ANARI_RENDERER}, {"camera", ANARI_CAMERA}, {"size", ANARI_UINT32_VEC2}, {"color", ANARI_DATA_TYPE}, {"depth", ANARI_DATA_TYPE}, {"normal", ANARI_DATA_TYPE}, {"albedo", ANARI_DATA_TYPE}, {"accumulation", ANARI_BOOL}, {"variance", ANARI_BOOL}, {0, ANARI_UNKNOWN}};
         return ANARI_FRAME_params;
      }
      case ANARI_GROUP:
      {
         static const ANARIParameter ANARI_GROUP_params[] = {{"name", ANARI_STRING}, {"surface", ANARI_ARRAY1D}, {"volume", ANARI_ARRAY1D}, {"light", ANARI_ARRAY1D}, {0, ANARI_UNKNOWN}};
         return ANARI_GROUP_params;
      }
      case ANARI_INSTANCE:
      {
         static const ANARIParameter ANARI_INSTANCE_params[] = {{"name", ANARI_STRING}, {"transform", ANARI_FLOAT32_MAT3x4}, {"group", ANARI_GROUP}, {"motion.transform", ANARI_ARRAY1D}, {"motion.scale", ANARI_ARRAY1D}, {"motion.rotation", ANARI_ARRAY1D}, {"motion.translation", ANARI_ARRAY1D}, {"time", ANARI_FLOAT32_BOX1}, {0, ANARI_UNKNOWN}};
         return ANARI_INSTANCE_params;
      }
      case ANARI_WORLD:
      {
         static const ANARIParameter ANARI_WORLD_params[] = {{"name", ANARI_STRING}, {"instance", ANARI_ARRAY1D}, {"surface", ANARI_ARRAY1D}, {"volume", ANARI_ARRAY1D}, {"light", ANARI_ARRAY1D}, {0, ANARI_UNKNOWN}};
         return ANARI_WORLD_params;
      }
      case ANARI_SURFACE:
      {
         static const ANARIParameter ANARI_SURFACE_params[] = {{"name", ANARI_STRING}, {"geometry", ANARI_GEOMETRY}, {"material", ANARI_MATERIAL}, {0, ANARI_UNKNOWN}};
         return ANARI_SURFACE_params;
      }
      default:
      {
         static const ANARIParameter none[] = {{0, ANARI_UNKNOWN}};
         return none;
      }
   }
}
const char ** query_extensions() {
   static const char *features[] = {
      "ANARI_KHR_CAMERA_OMNIDIRECTIONAL",
      "ANARI_KHR_CAMERA_ORTHOGRAPHIC",
      "ANARI_KHR_CAMERA_PERSPECTIVE",
      "ANARI_KHR_GEOMETRY_CONE",
      "ANARI_KHR_GEOMETRY_CURVE",
      "ANARI_KHR_GEOMETRY_CYLINDER",
      "ANARI_KHR_GEOMETRY_QUAD",
      "ANARI_KHR_GEOMETRY_SPHERE",
      "ANARI_KHR_GEOMETRY_TRIANGLE",
      "ANARI_KHR_LIGHT_DIRECTIONAL",
      "ANARI_KHR_LIGHT_POINT",
      "ANARI_KHR_LIGHT_SPOT",
      "ANARI_KHR_MATERIAL_MATTE",
      "ANARI_KHR_MATERIAL_TRANSPARENT_MATTE",
      "ANARI_KHR_SAMPLER_IMAGE1D",
      "ANARI_KHR_SAMPLER_IMAGE2D",
      "ANARI_KHR_SAMPLER_IMAGE3D",
      "ANARI_KHR_SAMPLER_PRIMITIVE",
      "ANARI_KHR_SAMPLER_TRANSFORM",
      "ANARI_KHR_SPATIAL_FIELD_STRUCTURED_REGULAR",
      "ANARI_KHR_VOLUME_SCIVIS",
      "ANARI_KHR_LIGHT_RING",
      "ANARI_KHR_LIGHT_QUAD",
      "ANARI_KHR_LIGHT_HDRI",
      "ANARI_KHR_FRAME_CONTINUATION",
      "ANARI_KHR_AUXILIARY_BUFFERS",
      "ANARI_KHR_AREA_LIGHTS",
      "ANARI_KHR_STOCHASTIC_RENDERING",
      "ANARI_KHR_TRANSFORMATION_MOTION_BLUR",
      "ANARI_KHR_ARRAY1D_REGION",
      0
   };
   return features;
}
}
}
