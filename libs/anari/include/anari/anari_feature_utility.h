// Copyright 2021 The Khronos Group
// SPDX-License-Identifier: Apache-2.0

// This file was generated by generate_feature_utility.py
// Don't make changes to this directly

#pragma once
#include <anari/anari.h>
typedef struct {
   int ANARI_extended_device;
   int ANARI_CORE_OBJECTS;
   int ANARI_KHR_CAMERA_OMNIDIRECTIONAL;
   int ANARI_KHR_CAMERA_ORTHOGRAPHIC;
   int ANARI_KHR_CAMERA_PERSPECTIVE;
   int ANARI_KHR_GEOMETRY_CONE;
   int ANARI_KHR_GEOMETRY_CURVE;
   int ANARI_KHR_GEOMETRY_CYLINDER;
   int ANARI_KHR_GEOMETRY_QUAD;
   int ANARI_KHR_GEOMETRY_SPHERE;
   int ANARI_KHR_GEOMETRY_TRIANGLE;
   int ANARI_KHR_LIGHT_DIRECTIONAL;
   int ANARI_KHR_LIGHT_POINT;
   int ANARI_KHR_LIGHT_SPOT;
   int ANARI_KHR_MATERIAL_MATTE;
   int ANARI_KHR_MATERIAL_TRANSPARENT_MATTE;
   int ANARI_KHR_SAMPLER_IMAGE1D;
   int ANARI_KHR_SAMPLER_IMAGE2D;
   int ANARI_KHR_SAMPLER_IMAGE3D;
   int ANARI_KHR_SAMPLER_PRIMITIVE;
   int ANARI_KHR_SAMPLER_TRANSFORM;
   int ANARI_KHR_SPATIAL_FIELD_STRUCTURED_REGULAR;
   int ANARI_KHR_VOLUME_SCIVIS;
   int ANARI_CORE_API;
   int ANARI_KHR_LIGHT_RING;
   int ANARI_KHR_LIGHT_QUAD;
   int ANARI_KHR_LIGHT_HDRI;
   int ANARI_SPEC_ALL;
   int ANARI_KHR_FRAME_CONTINUATION;
   int ANARI_KHR_AUXILIARY_BUFFERS;
   int ANARI_KHR_AREA_LIGHTS;
   int ANARI_KHR_STOCHASTIC_RENDERING;
   int ANARI_KHR_TRANSFORMATION_MOTION_BLUR;
   int ANARI_KHR_ARRAY1D_REGION;
} ANARIFeatures;
int anariGetObjectFeatures(ANARIFeatures *features, ANARILibrary, const char *deviceName, const char *objectName, ANARIDataType objectType);
int anariGetInstanceFeatures(ANARIFeatures *features, ANARIDevice device, ANARIObject object);
#ifdef ANARI_FEATURE_UTILITY_IMPL
#include <string.h>
static int feature_hash(const char *str) {
   static const uint32_t table[] = {0x4f4e0001u,0x42410002u,0x53520003u,0x4a490004u,0x605f0005u,0x66430006u,0x504f0029u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x49480046u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x51500218u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x79780220u,0x5352002au,0x4645002bu,0x605f002cu,0x5041002du,0x5150003cu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x4342003fu,0x4a49003du,0x100003eu,0x80000017u,0x4b4a0040u,0x46450041u,0x44430042u,0x55540043u,0x54530044u,0x1000045u,0x80000001u,0x53520047u,0x605f0048u,0x57410049u,0x5652005fu,0x0u,0x42410096u,0x0u,0x0u,0x535200c8u,0x464500dau,0x0u,0x0u,0x0u,0x0u,0x4a49011fu,0x42410154u,0x0u,0x0u,0x0u,0x0u,0x0u,0x5541017au,0x535201f1u,0x0u,0x504f020bu,0x53450063u,0x0u,0x0u,0x59580086u,0x42410071u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x4241007au,0x605f0072u,0x4d4c0073u,0x4a490074u,0x48470075u,0x49480076u,0x55540077u,0x54530078u,0x1000079u,0x8000001eu,0x5a59007bu,0x3231007cu,0x4544007du,0x605f007eu,0x5352007fu,0x46450080u,0x48470081u,0x4a490082u,0x504f0083u,0x4f4e0084u,0x1000085u,0x80000021u,0x4a490087u,0x4d4c0088u,0x4a490089u,0x4241008au,0x5352008bu,0x5a59008cu,0x605f008du,0x4342008eu,0x5655008fu,0x47460090u,0x47460091u,0x46450092u,0x53520093u,0x54530094u,0x1000095u,0x8000001du,0x4e4d0097u,0x46450098u,0x53520099u,0x4241009au,0x605f009bu,0x514f009cu,0x534d009eu,0x464500bdu,0x4f4e00a4u,0x0u,0x0u,0x0u,0x0u,0x555400b2u,0x4a4900a5u,0x454400a6u,0x4a4900a7u,0x535200a8u,0x464500a9u,0x444300aau,0x555400abu,0x4a4900acu,0x504f00adu,0x4f4e00aeu,0x424100afu,0x4d4c00b0u,0x10000b1u,0x80000002u,0x494800b3u,0x504f00b4u,0x484700b5u,0x535200b6u,0x424100b7u,0x515000b8u,0x494800b9u,0x4a4900bau,0x444300bbu,0x10000bcu,0x80000003u,0x535200beu,0x545300bfu,0x515000c0u,0x464500c1u,0x444300c2u,0x555400c3u,0x4a4900c4u,0x575600c5u,0x464500c6u,0x10000c7u,0x80000004u,0x424100c9u,0x4e4d00cau,0x464500cbu,0x605f00ccu,0x444300cdu,0x504f00ceu,0x4f4e00cfu,0x555400d0u,0x4a4900d1u,0x4f4e00d2u,0x565500d3u,0x424100d4u,0x555400d5u,0x4a4900d6u,0x504f00d7u,0x4f4e00d8u,0x10000d9u,0x8000001cu,0x504f00dbu,0x4e4d00dcu,0x464500ddu,0x555400deu,0x535200dfu,0x5a5900e0u,0x605f00e1u,0x554300e2u,0x5a4f00f4u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x5655010du,0x0u,0x51500111u,0x53520117u,0x4f4e00ffu,0x0u,0x0u,0x0u,0x0u,0x0u,0x53520102u,0x0u,0x0u,0x0u,0x4d4c0106u,0x46450100u,0x1000101u,0x80000005u,0x57560103u,0x46450104u,0x1000105u,0x80000006u,0x4a490107u,0x4f4e0108u,0x45440109u,0x4645010au,0x5352010bu,0x100010cu,0x80000007u,0x4241010eu,0x4544010fu,0x1000110u,0x80000008u,0x49480112u,0x46450113u,0x53520114u,0x46450115u,0x1000116u,0x80000009u,0x4a490118u,0x42410119u,0x4f4e011au,0x4847011bu,0x4d4c011cu,0x4645011du,0x100011eu,0x8000000au,0x48470120u,0x49480121u,0x55540122u,0x605f0123u,0x54440124u,0x4a490134u,0x0u,0x0u,0x0u,0x4544013fu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x504f0143u,0x56550148u,0x4a49014cu,0x51500150u,0x53520135u,0x46450136u,0x44430137u,0x55540138u,0x4a490139u,0x504f013au,0x4f4e013bu,0x4241013cu,0x4d4c013du,0x100013eu,0x8000000bu,0x53520140u,0x4a490141u,0x1000142u,0x8000001au,0x4a490144u,0x4f4e0145u,0x55540146u,0x1000147u,0x8000000cu,0x42410149u,0x4544014au,0x100014bu,0x80000019u,0x4f4e014du,0x4847014eu,0x100014fu,0x80000018u,0x504f0151u,0x55540152u,0x1000153u,0x8000000du,0x55540155u,0x46450156u,0x53520157u,0x4a490158u,0x42410159u,0x4d4c015au,0x605f015bu,0x554d015cu,0x42410164u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x53520169u,0x55540165u,0x55540166u,0x46450167u,0x1000168u,0x8000000eu,0x4241016au,0x4f4e016bu,0x5453016cu,0x5150016du,0x4241016eu,0x5352016fu,0x46450170u,0x4f4e0171u,0x55540172u,0x605f0173u,0x4e4d0174u,0x42410175u,0x55540176u,0x55540177u,0x46450178u,0x1000179u,0x8000000fu,0x4e4d018eu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x424101bfu,0x0u,0x0u,0x0u,0x504f01deu,0x5150018fu,0x4d4c0190u,0x46450191u,0x53520192u,0x605f0193u,0x55490194u,0x4e4d01a0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x535201adu,0x0u,0x0u,0x0u,0x535201b6u,0x424101a1u,0x484701a2u,0x464501a3u,0x343101a4u,0x454401a7u,0x454401a9u,0x454401abu,0x10001a8u,0x80000010u,0x10001aau,0x80000011u,0x10001acu,0x80000012u,0x4a4901aeu,0x4e4d01afu,0x4a4901b0u,0x555401b1u,0x4a4901b2u,0x575601b3u,0x464501b4u,0x10001b5u,0x80000013u,0x424101b7u,0x4f4e01b8u,0x545301b9u,0x474601bau,0x504f01bbu,0x535201bcu,0x4e4d01bdu,0x10001beu,0x80000014u,0x555401c0u,0x4a4901c1u,0x424101c2u,0x4d4c01c3u,0x605f01c4u,0x474601c5u,0x4a4901c6u,0x464501c7u,0x4d4c01c8u,0x454401c9u,0x605f01cau,0x545301cbu,0x555401ccu,0x535201cdu,0x565501ceu,0x444301cfu,0x555401d0u,0x565501d1u,0x535201d2u,0x464501d3u,0x454401d4u,0x605f01d5u,0x535201d6u,0x464501d7u,0x484701d8u,0x565501d9u,0x4d4c01dau,0x424101dbu,0x535201dcu,0x10001ddu,0x80000015u,0x444301dfu,0x494801e0u,0x424101e1u,0x545301e2u,0x555401e3u,0x4a4901e4u,0x444301e5u,0x605f01e6u,0x535201e7u,0x464501e8u,0x4f4e01e9u,0x454401eau,0x464501ebu,0x535201ecu,0x4a4901edu,0x4f4e01eeu,0x484701efu,0x10001f0u,0x8000001fu,0x424101f2u,0x4f4e01f3u,0x545301f4u,0x474601f5u,0x504f01f6u,0x535201f7u,0x4e4d01f8u,0x424101f9u,0x555401fau,0x4a4901fbu,0x504f01fcu,0x4f4e01fdu,0x605f01feu,0x4e4d01ffu,0x504f0200u,0x55540201u,0x4a490202u,0x504f0203u,0x4f4e0204u,0x605f0205u,0x43420206u,0x4d4c0207u,0x56550208u,0x53520209u,0x100020au,0x80000020u,0x4d4c020cu,0x5655020du,0x4e4d020eu,0x4645020fu,0x605f0210u,0x54530211u,0x44430212u,0x4a490213u,0x57560214u,0x4a490215u,0x54530216u,0x1000217u,0x80000016u,0x46450219u,0x4443021au,0x605f021bu,0x4241021cu,0x4d4c021du,0x4d4c021eu,0x100021fu,0x8000001bu,0x75740221u,0x66650222u,0x6f6e0223u,0x65640224u,0x66650225u,0x65640226u,0x605f0227u,0x65640228u,0x66650229u,0x7776022au,0x6a69022bu,0x6463022cu,0x6665022du,0x100022eu,0x80000000u};
   uint32_t cur = 0x42410000u;
   for(int i = 0;cur!=0;++i) {
      uint32_t idx = cur&0xFFFFu;
      uint32_t low = (cur>>16u)&0xFFu;
      uint32_t high = (cur>>24u)&0xFFu;
      uint32_t c = (uint32_t)str[i];
      if(c>=low && c<high) {
         cur = table[idx+c-low];
      } else {
         break;
      }
      if(cur&0x80000000u) {
         return cur&0xFFFFu;
      }
      if(str[i]==0) {
         break;
      }
   }
   return -1;
}
static void fillFeatureStruct(ANARIFeatures *features, const char *const *list) {
    memset(features, 0, sizeof(ANARIFeatures));
    for(const char *const *i = list;*i!=NULL;++i) {
        switch(feature_hash(*i)) {
            case 0: features->ANARI_extended_device = 1; break;
            case 1: features->ANARI_CORE_OBJECTS = 1; break;
            case 2: features->ANARI_KHR_CAMERA_OMNIDIRECTIONAL = 1; break;
            case 3: features->ANARI_KHR_CAMERA_ORTHOGRAPHIC = 1; break;
            case 4: features->ANARI_KHR_CAMERA_PERSPECTIVE = 1; break;
            case 5: features->ANARI_KHR_GEOMETRY_CONE = 1; break;
            case 6: features->ANARI_KHR_GEOMETRY_CURVE = 1; break;
            case 7: features->ANARI_KHR_GEOMETRY_CYLINDER = 1; break;
            case 8: features->ANARI_KHR_GEOMETRY_QUAD = 1; break;
            case 9: features->ANARI_KHR_GEOMETRY_SPHERE = 1; break;
            case 10: features->ANARI_KHR_GEOMETRY_TRIANGLE = 1; break;
            case 11: features->ANARI_KHR_LIGHT_DIRECTIONAL = 1; break;
            case 12: features->ANARI_KHR_LIGHT_POINT = 1; break;
            case 13: features->ANARI_KHR_LIGHT_SPOT = 1; break;
            case 14: features->ANARI_KHR_MATERIAL_MATTE = 1; break;
            case 15: features->ANARI_KHR_MATERIAL_TRANSPARENT_MATTE = 1; break;
            case 16: features->ANARI_KHR_SAMPLER_IMAGE1D = 1; break;
            case 17: features->ANARI_KHR_SAMPLER_IMAGE2D = 1; break;
            case 18: features->ANARI_KHR_SAMPLER_IMAGE3D = 1; break;
            case 19: features->ANARI_KHR_SAMPLER_PRIMITIVE = 1; break;
            case 20: features->ANARI_KHR_SAMPLER_TRANSFORM = 1; break;
            case 21: features->ANARI_KHR_SPATIAL_FIELD_STRUCTURED_REGULAR = 1; break;
            case 22: features->ANARI_KHR_VOLUME_SCIVIS = 1; break;
            case 23: features->ANARI_CORE_API = 1; break;
            case 24: features->ANARI_KHR_LIGHT_RING = 1; break;
            case 25: features->ANARI_KHR_LIGHT_QUAD = 1; break;
            case 26: features->ANARI_KHR_LIGHT_HDRI = 1; break;
            case 27: features->ANARI_SPEC_ALL = 1; break;
            case 28: features->ANARI_KHR_FRAME_CONTINUATION = 1; break;
            case 29: features->ANARI_KHR_AUXILIARY_BUFFERS = 1; break;
            case 30: features->ANARI_KHR_AREA_LIGHTS = 1; break;
            case 31: features->ANARI_KHR_STOCHASTIC_RENDERING = 1; break;
            case 32: features->ANARI_KHR_TRANSFORMATION_MOTION_BLUR = 1; break;
            case 33: features->ANARI_KHR_ARRAY1D_REGION = 1; break;
            default: break;
        }
    }
}
int anariGetObjectFeatures(ANARIFeatures *features, ANARILibrary library, const char *deviceName, const char *objectName, ANARIDataType objectType) {
    const char *const *list = (const char *const *)anariGetObjectInfo(library, deviceName, objectName, objectType, "feature", ANARI_STRING_LIST);
    if(list) {
        fillFeatureStruct(features, list);
        return 0;
    } else {
        return 1;
    }
}
int anariGetInstanceFeatures(ANARIFeatures *features, ANARIDevice device, ANARIObject object) {
    const char *const *list = NULL;
    anariGetProperty(device, object, "feature", ANARI_STRING_LIST, &list, sizeof(list), ANARI_WAIT);
    if(list) {
        fillFeatureStruct(features, list);
        return 0;
    } else {
        return 1;
    }
}
#endif
