// Copyright 2021 The Khronos Group
// SPDX-License-Identifier: Apache-2.0

// This file was generated by generate_feature_utility.py
// Don't make changes to this directly

#pragma once
#include <anari/anari.h>
typedef struct {
   int ANARI_KHR_CAMERA_OMNIDIRECTIONAL;
   int ANARI_KHR_CAMERA_ORTHOGRAPHIC;
   int ANARI_KHR_CAMERA_PERSPECTIVE;
   int ANARI_KHR_GEOMETRY_CONE;
   int ANARI_KHR_GEOMETRY_CURVE;
   int ANARI_KHR_GEOMETRY_CYLINDER;
   int ANARI_KHR_GEOMETRY_QUAD;
   int ANARI_KHR_GEOMETRY_SPHERE;
   int ANARI_KHR_GEOMETRY_TRIANGLE;
   int ANARI_KHR_LIGHT_DIRECTIONAL;
   int ANARI_KHR_LIGHT_POINT;
   int ANARI_KHR_LIGHT_SPOT;
   int ANARI_KHR_MATERIAL_MATTE;
   int ANARI_KHR_MATERIAL_TRANSPARENT_MATTE;
   int ANARI_KHR_SAMPLER_IMAGE1D;
   int ANARI_KHR_SAMPLER_IMAGE2D;
   int ANARI_KHR_SAMPLER_IMAGE3D;
   int ANARI_KHR_SAMPLER_PRIMITIVE;
   int ANARI_KHR_SAMPLER_TRANSFORM;
   int ANARI_KHR_SPATIAL_FIELD_STRUCTURED_REGULAR;
   int ANARI_KHR_VOLUME_SCIVIS;
   int ANARI_KHR_LIGHT_RING;
   int ANARI_KHR_LIGHT_QUAD;
   int ANARI_KHR_LIGHT_HDRI;
   int ANARI_KHR_MATERIAL_PHYSICALLY_BASED;
   int ANARI_KHR_FRAME_CONTINUATION;
   int ANARI_KHR_AUXILIARY_BUFFERS;
   int ANARI_KHR_AREA_LIGHTS;
   int ANARI_KHR_STOCHASTIC_RENDERING;
   int ANARI_KHR_TRANSFORMATION_MOTION_BLUR;
   int ANARI_KHR_ARRAY1D_REGION;
} ANARIFeatures;
int anariGetObjectFeatures(ANARIFeatures *features, ANARILibrary, const char *deviceName, const char *objectName, ANARIDataType objectType);
int anariGetInstanceFeatures(ANARIFeatures *features, ANARIDevice device, ANARIObject object);
#ifdef ANARI_FEATURE_UTILITY_IMPL
#include <string.h>
static int feature_hash(const char *str) {
   static const uint32_t table[] = {0x4f4e0001u,0x42410002u,0x53520003u,0x4a490004u,0x605f0005u,0x4c4b0006u,0x49480007u,0x53520008u,0x605f0009u,0x5741000au,0x56520020u,0x0u,0x42410057u,0x0u,0x0u,0x53520089u,0x4645009bu,0x0u,0x0u,0x0u,0x0u,0x4a4900e0u,0x42410115u,0x0u,0x0u,0x0u,0x0u,0x0u,0x5541014bu,0x535201c2u,0x0u,0x504f01dcu,0x53450024u,0x0u,0x0u,0x59580047u,0x42410032u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x4241003bu,0x605f0033u,0x4d4c0034u,0x4a490035u,0x48470036u,0x49480037u,0x55540038u,0x54530039u,0x100003au,0x8000001bu,0x5a59003cu,0x3231003du,0x4544003eu,0x605f003fu,0x53520040u,0x46450041u,0x48470042u,0x4a490043u,0x504f0044u,0x4f4e0045u,0x1000046u,0x8000001eu,0x4a490048u,0x4d4c0049u,0x4a49004au,0x4241004bu,0x5352004cu,0x5a59004du,0x605f004eu,0x4342004fu,0x56550050u,0x47460051u,0x47460052u,0x46450053u,0x53520054u,0x54530055u,0x1000056u,0x8000001au,0x4e4d0058u,0x46450059u,0x5352005au,0x4241005bu,0x605f005cu,0x514f005du,0x534d005fu,0x4645007eu,0x4f4e0065u,0x0u,0x0u,0x0u,0x0u,0x55540073u,0x4a490066u,0x45440067u,0x4a490068u,0x53520069u,0x4645006au,0x4443006bu,0x5554006cu,0x4a49006du,0x504f006eu,0x4f4e006fu,0x42410070u,0x4d4c0071u,0x1000072u,0x80000000u,0x49480074u,0x504f0075u,0x48470076u,0x53520077u,0x42410078u,0x51500079u,0x4948007au,0x4a49007bu,0x4443007cu,0x100007du,0x80000001u,0x5352007fu,0x54530080u,0x51500081u,0x46450082u,0x44430083u,0x55540084u,0x4a490085u,0x57560086u,0x46450087u,0x1000088u,0x80000002u,0x4241008au,0x4e4d008bu,0x4645008cu,0x605f008du,0x4443008eu,0x504f008fu,0x4f4e0090u,0x55540091u,0x4a490092u,0x4f4e0093u,0x56550094u,0x42410095u,0x55540096u,0x4a490097u,0x504f0098u,0x4f4e0099u,0x100009au,0x80000019u,0x504f009cu,0x4e4d009du,0x4645009eu,0x5554009fu,0x535200a0u,0x5a5900a1u,0x605f00a2u,0x554300a3u,0x5a4f00b5u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x565500ceu,0x0u,0x515000d2u,0x535200d8u,0x4f4e00c0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x535200c3u,0x0u,0x0u,0x0u,0x4d4c00c7u,0x464500c1u,0x10000c2u,0x80000003u,0x575600c4u,0x464500c5u,0x10000c6u,0x80000004u,0x4a4900c8u,0x4f4e00c9u,0x454400cau,0x464500cbu,0x535200ccu,0x10000cdu,0x80000005u,0x424100cfu,0x454400d0u,0x10000d1u,0x80000006u,0x494800d3u,0x464500d4u,0x535200d5u,0x464500d6u,0x10000d7u,0x80000007u,0x4a4900d9u,0x424100dau,0x4f4e00dbu,0x484700dcu,0x4d4c00ddu,0x464500deu,0x10000dfu,0x80000008u,0x484700e1u,0x494800e2u,0x555400e3u,0x605f00e4u,0x544400e5u,0x4a4900f5u,0x0u,0x0u,0x0u,0x45440100u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x504f0104u,0x56550109u,0x4a49010du,0x51500111u,0x535200f6u,0x464500f7u,0x444300f8u,0x555400f9u,0x4a4900fau,0x504f00fbu,0x4f4e00fcu,0x424100fdu,0x4d4c00feu,0x10000ffu,0x80000009u,0x53520101u,0x4a490102u,0x1000103u,0x80000017u,0x4a490105u,0x4f4e0106u,0x55540107u,0x1000108u,0x8000000au,0x4241010au,0x4544010bu,0x100010cu,0x80000016u,0x4f4e010eu,0x4847010fu,0x1000110u,0x80000015u,0x504f0112u,0x55540113u,0x1000114u,0x8000000bu,0x55540116u,0x46450117u,0x53520118u,0x4a490119u,0x4241011au,0x4d4c011bu,0x605f011cu,0x554d011du,0x42410125u,0x0u,0x0u,0x4948012au,0x0u,0x0u,0x0u,0x5352013au,0x55540126u,0x55540127u,0x46450128u,0x1000129u,0x8000000cu,0x5a59012bu,0x5453012cu,0x4a49012du,0x4443012eu,0x4241012fu,0x4d4c0130u,0x4d4c0131u,0x5a590132u,0x605f0133u,0x43420134u,0x42410135u,0x54530136u,0x46450137u,0x45440138u,0x1000139u,0x80000018u,0x4241013bu,0x4f4e013cu,0x5453013du,0x5150013eu,0x4241013fu,0x53520140u,0x46450141u,0x4f4e0142u,0x55540143u,0x605f0144u,0x4e4d0145u,0x42410146u,0x55540147u,0x55540148u,0x46450149u,0x100014au,0x8000000du,0x4e4d015fu,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x42410190u,0x0u,0x0u,0x0u,0x504f01afu,0x51500160u,0x4d4c0161u,0x46450162u,0x53520163u,0x605f0164u,0x55490165u,0x4e4d0171u,0x0u,0x0u,0x0u,0x0u,0x0u,0x0u,0x5352017eu,0x0u,0x0u,0x0u,0x53520187u,0x42410172u,0x48470173u,0x46450174u,0x34310175u,0x45440178u,0x4544017au,0x4544017cu,0x1000179u,0x8000000eu,0x100017bu,0x8000000fu,0x100017du,0x80000010u,0x4a49017fu,0x4e4d0180u,0x4a490181u,0x55540182u,0x4a490183u,0x57560184u,0x46450185u,0x1000186u,0x80000011u,0x42410188u,0x4f4e0189u,0x5453018au,0x4746018bu,0x504f018cu,0x5352018du,0x4e4d018eu,0x100018fu,0x80000012u,0x55540191u,0x4a490192u,0x42410193u,0x4d4c0194u,0x605f0195u,0x47460196u,0x4a490197u,0x46450198u,0x4d4c0199u,0x4544019au,0x605f019bu,0x5453019cu,0x5554019du,0x5352019eu,0x5655019fu,0x444301a0u,0x555401a1u,0x565501a2u,0x535201a3u,0x464501a4u,0x454401a5u,0x605f01a6u,0x535201a7u,0x464501a8u,0x484701a9u,0x565501aau,0x4d4c01abu,0x424101acu,0x535201adu,0x10001aeu,0x80000013u,0x444301b0u,0x494801b1u,0x424101b2u,0x545301b3u,0x555401b4u,0x4a4901b5u,0x444301b6u,0x605f01b7u,0x535201b8u,0x464501b9u,0x4f4e01bau,0x454401bbu,0x464501bcu,0x535201bdu,0x4a4901beu,0x4f4e01bfu,0x484701c0u,0x10001c1u,0x8000001cu,0x424101c3u,0x4f4e01c4u,0x545301c5u,0x474601c6u,0x504f01c7u,0x535201c8u,0x4e4d01c9u,0x424101cau,0x555401cbu,0x4a4901ccu,0x504f01cdu,0x4f4e01ceu,0x605f01cfu,0x4e4d01d0u,0x504f01d1u,0x555401d2u,0x4a4901d3u,0x504f01d4u,0x4f4e01d5u,0x605f01d6u,0x434201d7u,0x4d4c01d8u,0x565501d9u,0x535201dau,0x10001dbu,0x8000001du,0x4d4c01ddu,0x565501deu,0x4e4d01dfu,0x464501e0u,0x605f01e1u,0x545301e2u,0x444301e3u,0x4a4901e4u,0x575601e5u,0x4a4901e6u,0x545301e7u,0x10001e8u,0x80000014u};
   uint32_t cur = 0x42410000u;
   for(int i = 0;cur!=0;++i) {
      uint32_t idx = cur&0xFFFFu;
      uint32_t low = (cur>>16u)&0xFFu;
      uint32_t high = (cur>>24u)&0xFFu;
      uint32_t c = (uint32_t)str[i];
      if(c>=low && c<high) {
         cur = table[idx+c-low];
      } else {
         break;
      }
      if(cur&0x80000000u) {
         return cur&0xFFFFu;
      }
      if(str[i]==0) {
         break;
      }
   }
   return -1;
}
static void fillFeatureStruct(ANARIFeatures *features, const char *const *list) {
    memset(features, 0, sizeof(ANARIFeatures));
    for(const char *const *i = list;*i!=NULL;++i) {
        switch(feature_hash(*i)) {
            case 0: features->ANARI_KHR_CAMERA_OMNIDIRECTIONAL = 1; break;
            case 1: features->ANARI_KHR_CAMERA_ORTHOGRAPHIC = 1; break;
            case 2: features->ANARI_KHR_CAMERA_PERSPECTIVE = 1; break;
            case 3: features->ANARI_KHR_GEOMETRY_CONE = 1; break;
            case 4: features->ANARI_KHR_GEOMETRY_CURVE = 1; break;
            case 5: features->ANARI_KHR_GEOMETRY_CYLINDER = 1; break;
            case 6: features->ANARI_KHR_GEOMETRY_QUAD = 1; break;
            case 7: features->ANARI_KHR_GEOMETRY_SPHERE = 1; break;
            case 8: features->ANARI_KHR_GEOMETRY_TRIANGLE = 1; break;
            case 9: features->ANARI_KHR_LIGHT_DIRECTIONAL = 1; break;
            case 10: features->ANARI_KHR_LIGHT_POINT = 1; break;
            case 11: features->ANARI_KHR_LIGHT_SPOT = 1; break;
            case 12: features->ANARI_KHR_MATERIAL_MATTE = 1; break;
            case 13: features->ANARI_KHR_MATERIAL_TRANSPARENT_MATTE = 1; break;
            case 14: features->ANARI_KHR_SAMPLER_IMAGE1D = 1; break;
            case 15: features->ANARI_KHR_SAMPLER_IMAGE2D = 1; break;
            case 16: features->ANARI_KHR_SAMPLER_IMAGE3D = 1; break;
            case 17: features->ANARI_KHR_SAMPLER_PRIMITIVE = 1; break;
            case 18: features->ANARI_KHR_SAMPLER_TRANSFORM = 1; break;
            case 19: features->ANARI_KHR_SPATIAL_FIELD_STRUCTURED_REGULAR = 1; break;
            case 20: features->ANARI_KHR_VOLUME_SCIVIS = 1; break;
            case 21: features->ANARI_KHR_LIGHT_RING = 1; break;
            case 22: features->ANARI_KHR_LIGHT_QUAD = 1; break;
            case 23: features->ANARI_KHR_LIGHT_HDRI = 1; break;
            case 24: features->ANARI_KHR_MATERIAL_PHYSICALLY_BASED = 1; break;
            case 25: features->ANARI_KHR_FRAME_CONTINUATION = 1; break;
            case 26: features->ANARI_KHR_AUXILIARY_BUFFERS = 1; break;
            case 27: features->ANARI_KHR_AREA_LIGHTS = 1; break;
            case 28: features->ANARI_KHR_STOCHASTIC_RENDERING = 1; break;
            case 29: features->ANARI_KHR_TRANSFORMATION_MOTION_BLUR = 1; break;
            case 30: features->ANARI_KHR_ARRAY1D_REGION = 1; break;
            default: break;
        }
    }
}
int anariGetObjectFeatures(ANARIFeatures *features, ANARILibrary library, const char *deviceName, const char *objectName, ANARIDataType objectType) {
    const char *const *list = (const char *const *)anariGetObjectInfo(library, deviceName, objectName, objectType, "feature", ANARI_STRING_LIST);
    if(list) {
        fillFeatureStruct(features, list);
        return 0;
    } else {
        return 1;
    }
}
int anariGetInstanceFeatures(ANARIFeatures *features, ANARIDevice device, ANARIObject object) {
    const char *const *list = NULL;
    anariGetProperty(device, object, "feature", ANARI_STRING_LIST, &list, sizeof(list), ANARI_WAIT);
    if(list) {
        fillFeatureStruct(features, list);
        return 0;
    } else {
        return 1;
    }
}
#endif
